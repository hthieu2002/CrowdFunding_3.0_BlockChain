{"abi":[],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"The interface `IClaimConditionMultiPhase` is written for thirdweb's 'Drop' contracts, which are distribution mechanisms for tokens.  An authorized wallet can set a series of claim conditions, ordered by their respective `startTimestamp`.  A claim condition defines criteria under which accounts can mint tokens. Claim conditions can be overwritten  or added to by the contract admin. At any moment, there is only one active claim condition.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/extension/interface/IClaimConditionMultiPhase.sol\":\"IClaimConditionMultiPhase\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[\":@chainlink/=lib/chainlink/\",\":@ds-test/=lib/ds-test/src/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@std/=lib/forge-std/src/\",\":@thirdweb-dev/dynamic-contracts/=lib/dynamic-contracts/\",\":ERC721A-Upgradeable/=lib/ERC721A-Upgradeable/contracts/\",\":ERC721A/=lib/ERC721A/contracts/\",\":chainlink/=lib/chainlink/contracts/\",\":contracts/=contracts/\",\":ds-test/=lib/ds-test/src/\",\":dynamic-contracts/=lib/dynamic-contracts/src/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":erc721a-upgradeable/=lib/ERC721A-Upgradeable/\",\":erc721a/=lib/ERC721A/\",\":forge-std/=lib/forge-std/src/\",\":lib/sstore2/=lib/dynamic-contracts/lib/sstore2/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sstore2/=lib/dynamic-contracts/lib/sstore2/contracts/\"]},\"sources\":{\"contracts/extension/interface/IClaimCondition.sol\":{\"keccak256\":\"0x391e69970031edb30dfa59f8db33c7446b349cd5ec505fd99f0f0b672b19e6d6\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://fd9eafca6098421f3aa25bf0a0b24386facc764b7ecb8e6ce4a890afa3c6d459\",\"dweb:/ipfs/QmPXTSX2ie5wsZ6FyXWS4YMa7aPpYNyza9Rym1n799B5LU\"]},\"contracts/extension/interface/IClaimConditionMultiPhase.sol\":{\"keccak256\":\"0x8388214d6cc8f1fd481aed7e062a8b23d5959e870a56076017fcf474404dbbfa\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://54c039ba9f0e674a6bdbb0ab015ad4054feffaea7eb3cc7c485aa95761156125\",\"dweb:/ipfs/QmTya89XYsc1iGAhfsHeZkgGaAv7ivA5Vr4jrGCifYHmKh\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.23+commit.f704f362"},"language":"Solidity","output":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"remappings":["@chainlink/=lib/chainlink/","@ds-test/=lib/ds-test/src/","@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/","@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","@std/=lib/forge-std/src/","@thirdweb-dev/dynamic-contracts/=lib/dynamic-contracts/","ERC721A-Upgradeable/=lib/ERC721A-Upgradeable/contracts/","ERC721A/=lib/ERC721A/contracts/","chainlink/=lib/chainlink/contracts/","contracts/=contracts/","ds-test/=lib/ds-test/src/","dynamic-contracts/=lib/dynamic-contracts/src/","erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/","erc721a-upgradeable/=lib/ERC721A-Upgradeable/","erc721a/=lib/ERC721A/","forge-std/=lib/forge-std/src/","lib/sstore2/=lib/dynamic-contracts/lib/sstore2/","openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/","openzeppelin-contracts/=lib/openzeppelin-contracts/","openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/","sstore2/=lib/dynamic-contracts/lib/sstore2/contracts/"],"optimizer":{"enabled":true,"runs":20},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"contracts/extension/interface/IClaimConditionMultiPhase.sol":"IClaimConditionMultiPhase"},"libraries":{}},"sources":{"contracts/extension/interface/IClaimCondition.sol":{"keccak256":"0x391e69970031edb30dfa59f8db33c7446b349cd5ec505fd99f0f0b672b19e6d6","urls":["bzz-raw://fd9eafca6098421f3aa25bf0a0b24386facc764b7ecb8e6ce4a890afa3c6d459","dweb:/ipfs/QmPXTSX2ie5wsZ6FyXWS4YMa7aPpYNyza9Rym1n799B5LU"],"license":"Apache-2.0"},"contracts/extension/interface/IClaimConditionMultiPhase.sol":{"keccak256":"0x8388214d6cc8f1fd481aed7e062a8b23d5959e870a56076017fcf474404dbbfa","urls":["bzz-raw://54c039ba9f0e674a6bdbb0ab015ad4054feffaea7eb3cc7c485aa95761156125","dweb:/ipfs/QmTya89XYsc1iGAhfsHeZkgGaAv7ivA5Vr4jrGCifYHmKh"],"license":"Apache-2.0"}},"version":1},"ast":{"absolutePath":"contracts/extension/interface/IClaimConditionMultiPhase.sol","id":32805,"exportedSymbols":{"IClaimCondition":[32780],"IClaimConditionMultiPhase":[32804]},"nodeType":"SourceUnit","src":"39:1783:104","nodes":[{"id":32782,"nodeType":"PragmaDirective","src":"39:23:104","nodes":[],"literals":["solidity","^","0.8",".0"]},{"id":32783,"nodeType":"ImportDirective","src":"86:31:104","nodes":[],"absolutePath":"contracts/extension/interface/IClaimCondition.sol","file":"./IClaimCondition.sol","nameLocation":"-1:-1:-1","scope":32805,"sourceUnit":32781,"symbolAliases":[],"unitAlias":""},{"id":32804,"nodeType":"ContractDefinition","src":"585:1236:104","nodes":[{"id":32803,"nodeType":"StructDefinition","src":"1597:222:104","nodes":[],"canonicalName":"IClaimConditionMultiPhase.ClaimConditionList","documentation":{"id":32787,"nodeType":"StructuredDocumentation","src":"646:946:104","text":"  @notice The set of all claim conditions, at any given moment.\n  Claim Phase ID = [currentStartId, currentStartId + length - 1];\n  @param currentStartId           The uid for the first claim condition amongst the current set of\n                                  claim conditions. The uid for each next claim condition is one\n                                  more than the previous claim condition's uid.\n  @param count                    The total number of phases / claim conditions in the list\n                                  of claim conditions.\n  @param conditions                   The claim conditions at a given uid. Claim conditions\n                                  are ordered in an ascending order by their `startTimestamp`.\n  @param supplyClaimedByWallet    Map from a claim condition uid and account to supply claimed by account."},"members":[{"constant":false,"id":32789,"mutability":"mutable","name":"currentStartId","nameLocation":"1641:14:104","nodeType":"VariableDeclaration","scope":32803,"src":"1633:22:104","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":32788,"name":"uint256","nodeType":"ElementaryTypeName","src":"1633:7:104","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":32791,"mutability":"mutable","name":"count","nameLocation":"1673:5:104","nodeType":"VariableDeclaration","scope":32803,"src":"1665:13:104","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":32790,"name":"uint256","nodeType":"ElementaryTypeName","src":"1665:7:104","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":32796,"mutability":"mutable","name":"conditions","nameLocation":"1723:10:104","nodeType":"VariableDeclaration","scope":32803,"src":"1688:45:104","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_ClaimCondition_$32779_storage_$","typeString":"mapping(uint256 => struct IClaimCondition.ClaimCondition)"},"typeName":{"id":32795,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":32792,"name":"uint256","nodeType":"ElementaryTypeName","src":"1696:7:104","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"1688:34:104","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_ClaimCondition_$32779_storage_$","typeString":"mapping(uint256 => struct IClaimCondition.ClaimCondition)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":32794,"nodeType":"UserDefinedTypeName","pathNode":{"id":32793,"name":"ClaimCondition","nameLocations":["1707:14:104"],"nodeType":"IdentifierPath","referencedDeclaration":32779,"src":"1707:14:104"},"referencedDeclaration":32779,"src":"1707:14:104","typeDescriptions":{"typeIdentifier":"t_struct$_ClaimCondition_$32779_storage_ptr","typeString":"struct IClaimCondition.ClaimCondition"}}},"visibility":"internal"},{"constant":false,"id":32802,"mutability":"mutable","name":"supplyClaimedByWallet","nameLocation":"1791:21:104","nodeType":"VariableDeclaration","scope":32803,"src":"1743:69:104","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"},"typeName":{"id":32801,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":32797,"name":"uint256","nodeType":"ElementaryTypeName","src":"1751:7:104","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"1743:47:104","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":32800,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":32798,"name":"address","nodeType":"ElementaryTypeName","src":"1770:7:104","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1762:27:104","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":32799,"name":"uint256","nodeType":"ElementaryTypeName","src":"1781:7:104","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}}},"visibility":"internal"}],"name":"ClaimConditionList","nameLocation":"1604:18:104","scope":32804,"visibility":"public"}],"abstract":false,"baseContracts":[{"baseName":{"id":32785,"name":"IClaimCondition","nameLocations":["624:15:104"],"nodeType":"IdentifierPath","referencedDeclaration":32780,"src":"624:15:104"},"id":32786,"nodeType":"InheritanceSpecifier","src":"624:15:104"}],"canonicalName":"IClaimConditionMultiPhase","contractDependencies":[],"contractKind":"interface","documentation":{"id":32784,"nodeType":"StructuredDocumentation","src":"119:464:104","text":"  The interface `IClaimConditionMultiPhase` is written for thirdweb's 'Drop' contracts, which are distribution mechanisms for tokens.\n  An authorized wallet can set a series of claim conditions, ordered by their respective `startTimestamp`.\n  A claim condition defines criteria under which accounts can mint tokens. Claim conditions can be overwritten\n  or added to by the contract admin. At any moment, there is only one active claim condition."},"fullyImplemented":true,"linearizedBaseContracts":[32804,32780],"name":"IClaimConditionMultiPhase","nameLocation":"595:25:104","scope":32805,"usedErrors":[],"usedEvents":[]}],"license":"Apache-2.0"},"id":104}