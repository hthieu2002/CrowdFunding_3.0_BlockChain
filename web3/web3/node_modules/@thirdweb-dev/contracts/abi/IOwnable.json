{"abi":[{"type":"function","name":"owner","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"setOwner","inputs":[{"name":"_newOwner","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"event","name":"OwnerUpdated","inputs":[{"name":"prevOwner","type":"address","indexed":true,"internalType":"address"},{"name":"newOwner","type":"address","indexed":true,"internalType":"address"}],"anonymous":false}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"owner()":"8da5cb5b","setOwner(address)":"13af4035"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"prevOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"OwnerUpdated(address,address)\":{\"details\":\"Emitted when a new Owner is set.\"}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the owner of the contract.\"},\"setOwner(address)\":{\"details\":\"Lets a module admin set a new owner for the contract. The new owner must be a module admin.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Thirdweb's `Ownable` is a contract extension to be used with any base contract. It exposes functions for setting and reading  who the 'owner' of the inheriting smart contract is, and lets the inheriting contract perform conditional logic that uses  information about who the contract's owner is.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/extension/interface/IOwnable.sol\":\"IOwnable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[\":@chainlink/=lib/chainlink/\",\":@ds-test/=lib/ds-test/src/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@std/=lib/forge-std/src/\",\":@thirdweb-dev/dynamic-contracts/=lib/dynamic-contracts/\",\":ERC721A-Upgradeable/=lib/ERC721A-Upgradeable/contracts/\",\":ERC721A/=lib/ERC721A/contracts/\",\":chainlink/=lib/chainlink/contracts/\",\":contracts/=contracts/\",\":ds-test/=lib/ds-test/src/\",\":dynamic-contracts/=lib/dynamic-contracts/src/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":erc721a-upgradeable/=lib/ERC721A-Upgradeable/\",\":erc721a/=lib/ERC721A/\",\":forge-std/=lib/forge-std/src/\",\":lib/sstore2/=lib/dynamic-contracts/lib/sstore2/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sstore2/=lib/dynamic-contracts/lib/sstore2/contracts/\"]},\"sources\":{\"contracts/extension/interface/IOwnable.sol\":{\"keccak256\":\"0xd659a64da6264fdd50ee379be032fea4917eba4fadfd6d366107fb17e46907f3\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://c15940c4a3d229f4fdd1226fe297a58fde10b07b86a34de1ed11a8802dd5dea9\",\"dweb:/ipfs/QmS8p8CxWiahLkYsCWNhFjCnmQzuc4ck3kjYYuCFj8LsmC\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.23+commit.f704f362"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"prevOwner","type":"address","indexed":true},{"internalType":"address","name":"newOwner","type":"address","indexed":true}],"type":"event","name":"OwnerUpdated","anonymous":false},{"inputs":[],"stateMutability":"view","type":"function","name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[{"internalType":"address","name":"_newOwner","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"setOwner"}],"devdoc":{"kind":"dev","methods":{"owner()":{"details":"Returns the owner of the contract."},"setOwner(address)":{"details":"Lets a module admin set a new owner for the contract. The new owner must be a module admin."}},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"remappings":["@chainlink/=lib/chainlink/","@ds-test/=lib/ds-test/src/","@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/","@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","@std/=lib/forge-std/src/","@thirdweb-dev/dynamic-contracts/=lib/dynamic-contracts/","ERC721A-Upgradeable/=lib/ERC721A-Upgradeable/contracts/","ERC721A/=lib/ERC721A/contracts/","chainlink/=lib/chainlink/contracts/","contracts/=contracts/","ds-test/=lib/ds-test/src/","dynamic-contracts/=lib/dynamic-contracts/src/","erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/","erc721a-upgradeable/=lib/ERC721A-Upgradeable/","erc721a/=lib/ERC721A/","forge-std/=lib/forge-std/src/","lib/sstore2/=lib/dynamic-contracts/lib/sstore2/","openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/","openzeppelin-contracts/=lib/openzeppelin-contracts/","openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/","sstore2/=lib/dynamic-contracts/lib/sstore2/contracts/"],"optimizer":{"enabled":true,"runs":20},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"contracts/extension/interface/IOwnable.sol":"IOwnable"},"libraries":{}},"sources":{"contracts/extension/interface/IOwnable.sol":{"keccak256":"0xd659a64da6264fdd50ee379be032fea4917eba4fadfd6d366107fb17e46907f3","urls":["bzz-raw://c15940c4a3d229f4fdd1226fe297a58fde10b07b86a34de1ed11a8802dd5dea9","dweb:/ipfs/QmS8p8CxWiahLkYsCWNhFjCnmQzuc4ck3kjYYuCFj8LsmC"],"license":"Apache-2.0"}},"version":1},"ast":{"absolutePath":"contracts/extension/interface/IOwnable.sol","id":33684,"exportedSymbols":{"IOwnable":[33683]},"nodeType":"SourceUnit","src":"39:768:126","nodes":[{"id":33662,"nodeType":"PragmaDirective","src":"39:23:126","nodes":[],"literals":["solidity","^","0.8",".0"]},{"id":33683,"nodeType":"ContractDefinition","src":"401:405:126","nodes":[{"id":33669,"nodeType":"FunctionDefinition","src":"474:49:126","nodes":[],"documentation":{"id":33664,"nodeType":"StructuredDocumentation","src":"426:43:126","text":"@dev Returns the owner of the contract."},"functionSelector":"8da5cb5b","implemented":false,"kind":"function","modifiers":[],"name":"owner","nameLocation":"483:5:126","parameters":{"id":33665,"nodeType":"ParameterList","parameters":[],"src":"488:2:126"},"returnParameters":{"id":33668,"nodeType":"ParameterList","parameters":[{"constant":false,"id":33667,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":33669,"src":"514:7:126","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":33666,"name":"address","nodeType":"ElementaryTypeName","src":"514:7:126","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"513:9:126"},"scope":33683,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":33675,"nodeType":"FunctionDefinition","src":"634:46:126","nodes":[],"documentation":{"id":33670,"nodeType":"StructuredDocumentation","src":"529:100:126","text":"@dev Lets a module admin set a new owner for the contract. The new owner must be a module admin."},"functionSelector":"13af4035","implemented":false,"kind":"function","modifiers":[],"name":"setOwner","nameLocation":"643:8:126","parameters":{"id":33673,"nodeType":"ParameterList","parameters":[{"constant":false,"id":33672,"mutability":"mutable","name":"_newOwner","nameLocation":"660:9:126","nodeType":"VariableDeclaration","scope":33675,"src":"652:17:126","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":33671,"name":"address","nodeType":"ElementaryTypeName","src":"652:7:126","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"651:19:126"},"returnParameters":{"id":33674,"nodeType":"ParameterList","parameters":[],"src":"679:0:126"},"scope":33683,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":33682,"nodeType":"EventDefinition","src":"732:72:126","nodes":[],"anonymous":false,"documentation":{"id":33676,"nodeType":"StructuredDocumentation","src":"686:41:126","text":"@dev Emitted when a new Owner is set."},"eventSelector":"8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d76","name":"OwnerUpdated","nameLocation":"738:12:126","parameters":{"id":33681,"nodeType":"ParameterList","parameters":[{"constant":false,"id":33678,"indexed":true,"mutability":"mutable","name":"prevOwner","nameLocation":"767:9:126","nodeType":"VariableDeclaration","scope":33682,"src":"751:25:126","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":33677,"name":"address","nodeType":"ElementaryTypeName","src":"751:7:126","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":33680,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"794:8:126","nodeType":"VariableDeclaration","scope":33682,"src":"778:24:126","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":33679,"name":"address","nodeType":"ElementaryTypeName","src":"778:7:126","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"750:53:126"}}],"abstract":false,"baseContracts":[],"canonicalName":"IOwnable","contractDependencies":[],"contractKind":"interface","documentation":{"id":33663,"nodeType":"StructuredDocumentation","src":"86:313:126","text":"  Thirdweb's `Ownable` is a contract extension to be used with any base contract. It exposes functions for setting and reading\n  who the 'owner' of the inheriting smart contract is, and lets the inheriting contract perform conditional logic that uses\n  information about who the contract's owner is."},"fullyImplemented":false,"linearizedBaseContracts":[33683],"name":"IOwnable","nameLocation":"411:8:126","scope":33684,"usedErrors":[],"usedEvents":[33682]}],"license":"Apache-2.0"},"id":126}