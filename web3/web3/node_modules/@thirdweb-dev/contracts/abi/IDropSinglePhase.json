{"abi":[{"type":"function","name":"claim","inputs":[{"name":"receiver","type":"address","internalType":"address"},{"name":"quantity","type":"uint256","internalType":"uint256"},{"name":"currency","type":"address","internalType":"address"},{"name":"pricePerToken","type":"uint256","internalType":"uint256"},{"name":"allowlistProof","type":"tuple","internalType":"struct IDropSinglePhase.AllowlistProof","components":[{"name":"proof","type":"bytes32[]","internalType":"bytes32[]"},{"name":"quantityLimitPerWallet","type":"uint256","internalType":"uint256"},{"name":"pricePerToken","type":"uint256","internalType":"uint256"},{"name":"currency","type":"address","internalType":"address"}]},{"name":"data","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"payable"},{"type":"function","name":"setClaimConditions","inputs":[{"name":"phase","type":"tuple","internalType":"struct IClaimCondition.ClaimCondition","components":[{"name":"startTimestamp","type":"uint256","internalType":"uint256"},{"name":"maxClaimableSupply","type":"uint256","internalType":"uint256"},{"name":"supplyClaimed","type":"uint256","internalType":"uint256"},{"name":"quantityLimitPerWallet","type":"uint256","internalType":"uint256"},{"name":"merkleRoot","type":"bytes32","internalType":"bytes32"},{"name":"pricePerToken","type":"uint256","internalType":"uint256"},{"name":"currency","type":"address","internalType":"address"},{"name":"metadata","type":"string","internalType":"string"}]},{"name":"resetClaimEligibility","type":"bool","internalType":"bool"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"event","name":"ClaimConditionUpdated","inputs":[{"name":"condition","type":"tuple","indexed":false,"internalType":"struct IClaimCondition.ClaimCondition","components":[{"name":"startTimestamp","type":"uint256","internalType":"uint256"},{"name":"maxClaimableSupply","type":"uint256","internalType":"uint256"},{"name":"supplyClaimed","type":"uint256","internalType":"uint256"},{"name":"quantityLimitPerWallet","type":"uint256","internalType":"uint256"},{"name":"merkleRoot","type":"bytes32","internalType":"bytes32"},{"name":"pricePerToken","type":"uint256","internalType":"uint256"},{"name":"currency","type":"address","internalType":"address"},{"name":"metadata","type":"string","internalType":"string"}]},{"name":"resetEligibility","type":"bool","indexed":false,"internalType":"bool"}],"anonymous":false},{"type":"event","name":"TokensClaimed","inputs":[{"name":"claimer","type":"address","indexed":true,"internalType":"address"},{"name":"receiver","type":"address","indexed":true,"internalType":"address"},{"name":"startTokenId","type":"uint256","indexed":true,"internalType":"uint256"},{"name":"quantityClaimed","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"claim(address,uint256,address,uint256,(bytes32[],uint256,uint256,address),bytes)":"84bb1e42","setClaimConditions((uint256,uint256,uint256,uint256,bytes32,uint256,address,string),bool)":"426cfaf3"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxClaimableSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantityLimitPerWallet\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"pricePerToken\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"indexed\":false,\"internalType\":\"struct IClaimCondition.ClaimCondition\",\"name\":\"condition\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"resetEligibility\",\"type\":\"bool\"}],\"name\":\"ClaimConditionUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"startTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantityClaimed\",\"type\":\"uint256\"}],\"name\":\"TokensClaimed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pricePerToken\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"quantityLimitPerWallet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pricePerToken\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"}],\"internalType\":\"struct IDropSinglePhase.AllowlistProof\",\"name\":\"allowlistProof\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxClaimableSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantityLimitPerWallet\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"pricePerToken\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"internalType\":\"struct IClaimCondition.ClaimCondition\",\"name\":\"phase\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"resetClaimEligibility\",\"type\":\"bool\"}],\"name\":\"setClaimConditions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"claim(address,uint256,address,uint256,(bytes32[],uint256,uint256,address),bytes)\":{\"params\":{\"allowlistProof\":\"The proof of the claimer's inclusion in the merkle root allowlist                                        of the claim conditions that apply.\",\"currency\":\"The currency in which to pay for the claim.\",\"data\":\"Arbitrary bytes data that can be leveraged in the implementation of this interface.\",\"pricePerToken\":\"The price per token to pay for the claim.\",\"quantity\":\"The quantity of NFTs to claim.\",\"receiver\":\"The receiver of the NFTs to claim.\"}},\"setClaimConditions((uint256,uint256,uint256,uint256,bytes32,uint256,address,string),bool)\":{\"params\":{\"phase\":\"Claim condition to set.\",\"resetClaimEligibility\":\"Whether to honor the restrictions applied to wallets who have claimed tokens in the current conditions,                                  in the new claim conditions being set.\"}}},\"version\":1},\"userdoc\":{\"events\":{\"ClaimConditionUpdated((uint256,uint256,uint256,uint256,bytes32,uint256,address,string),bool)\":{\"notice\":\"Emitted when the contract's claim conditions are updated.\"},\"TokensClaimed(address,address,uint256,uint256)\":{\"notice\":\"Emitted when tokens are claimed via `claim`.\"}},\"kind\":\"user\",\"methods\":{\"claim(address,uint256,address,uint256,(bytes32[],uint256,uint256,address),bytes)\":{\"notice\":\"Lets an account claim a given quantity of NFTs.\"},\"setClaimConditions((uint256,uint256,uint256,uint256,bytes32,uint256,address,string),bool)\":{\"notice\":\"Lets a contract admin (account with `DEFAULT_ADMIN_ROLE`) set claim conditions.\"}},\"notice\":\"The interface `IDropSinglePhase` is written for thirdweb's 'DropSinglePhase' contracts, which are distribution mechanisms for tokens.  An authorized wallet can set a claim condition for the distribution of the contract's tokens.  A claim condition defines criteria under which accounts can mint tokens. Claim conditions can be overwritten  or added to by the contract admin. At any moment, there is only one active claim condition.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/extension/interface/IDropSinglePhase.sol\":\"IDropSinglePhase\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[\":@chainlink/=lib/chainlink/\",\":@ds-test/=lib/ds-test/src/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@std/=lib/forge-std/src/\",\":@thirdweb-dev/dynamic-contracts/=lib/dynamic-contracts/\",\":ERC721A-Upgradeable/=lib/ERC721A-Upgradeable/contracts/\",\":ERC721A/=lib/ERC721A/contracts/\",\":chainlink/=lib/chainlink/contracts/\",\":contracts/=contracts/\",\":ds-test/=lib/ds-test/src/\",\":dynamic-contracts/=lib/dynamic-contracts/src/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":erc721a-upgradeable/=lib/ERC721A-Upgradeable/\",\":erc721a/=lib/ERC721A/\",\":forge-std/=lib/forge-std/src/\",\":lib/sstore2/=lib/dynamic-contracts/lib/sstore2/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sstore2/=lib/dynamic-contracts/lib/sstore2/contracts/\"]},\"sources\":{\"contracts/extension/interface/IClaimCondition.sol\":{\"keccak256\":\"0x391e69970031edb30dfa59f8db33c7446b349cd5ec505fd99f0f0b672b19e6d6\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://fd9eafca6098421f3aa25bf0a0b24386facc764b7ecb8e6ce4a890afa3c6d459\",\"dweb:/ipfs/QmPXTSX2ie5wsZ6FyXWS4YMa7aPpYNyza9Rym1n799B5LU\"]},\"contracts/extension/interface/IDropSinglePhase.sol\":{\"keccak256\":\"0xe0a451031e98104d0f4879ec61feab4626c85b234c8db8c6cdbf5c9d4bb58a36\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://b651b6128a69e35eadca6633bfa91529ca917edd0601537e509ba3c6056bc7a9\",\"dweb:/ipfs/QmakTGgGyaT9MTCsxuPJmMaGBRX2sBzmKZnqqNb5oiHmnZ\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.23+commit.f704f362"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"struct IClaimCondition.ClaimCondition","name":"condition","type":"tuple","components":[{"internalType":"uint256","name":"startTimestamp","type":"uint256"},{"internalType":"uint256","name":"maxClaimableSupply","type":"uint256"},{"internalType":"uint256","name":"supplyClaimed","type":"uint256"},{"internalType":"uint256","name":"quantityLimitPerWallet","type":"uint256"},{"internalType":"bytes32","name":"merkleRoot","type":"bytes32"},{"internalType":"uint256","name":"pricePerToken","type":"uint256"},{"internalType":"address","name":"currency","type":"address"},{"internalType":"string","name":"metadata","type":"string"}],"indexed":false},{"internalType":"bool","name":"resetEligibility","type":"bool","indexed":false}],"type":"event","name":"ClaimConditionUpdated","anonymous":false},{"inputs":[{"internalType":"address","name":"claimer","type":"address","indexed":true},{"internalType":"address","name":"receiver","type":"address","indexed":true},{"internalType":"uint256","name":"startTokenId","type":"uint256","indexed":true},{"internalType":"uint256","name":"quantityClaimed","type":"uint256","indexed":false}],"type":"event","name":"TokensClaimed","anonymous":false},{"inputs":[{"internalType":"address","name":"receiver","type":"address"},{"internalType":"uint256","name":"quantity","type":"uint256"},{"internalType":"address","name":"currency","type":"address"},{"internalType":"uint256","name":"pricePerToken","type":"uint256"},{"internalType":"struct IDropSinglePhase.AllowlistProof","name":"allowlistProof","type":"tuple","components":[{"internalType":"bytes32[]","name":"proof","type":"bytes32[]"},{"internalType":"uint256","name":"quantityLimitPerWallet","type":"uint256"},{"internalType":"uint256","name":"pricePerToken","type":"uint256"},{"internalType":"address","name":"currency","type":"address"}]},{"internalType":"bytes","name":"data","type":"bytes"}],"stateMutability":"payable","type":"function","name":"claim"},{"inputs":[{"internalType":"struct IClaimCondition.ClaimCondition","name":"phase","type":"tuple","components":[{"internalType":"uint256","name":"startTimestamp","type":"uint256"},{"internalType":"uint256","name":"maxClaimableSupply","type":"uint256"},{"internalType":"uint256","name":"supplyClaimed","type":"uint256"},{"internalType":"uint256","name":"quantityLimitPerWallet","type":"uint256"},{"internalType":"bytes32","name":"merkleRoot","type":"bytes32"},{"internalType":"uint256","name":"pricePerToken","type":"uint256"},{"internalType":"address","name":"currency","type":"address"},{"internalType":"string","name":"metadata","type":"string"}]},{"internalType":"bool","name":"resetClaimEligibility","type":"bool"}],"stateMutability":"nonpayable","type":"function","name":"setClaimConditions"}],"devdoc":{"kind":"dev","methods":{"claim(address,uint256,address,uint256,(bytes32[],uint256,uint256,address),bytes)":{"params":{"allowlistProof":"The proof of the claimer's inclusion in the merkle root allowlist                                        of the claim conditions that apply.","currency":"The currency in which to pay for the claim.","data":"Arbitrary bytes data that can be leveraged in the implementation of this interface.","pricePerToken":"The price per token to pay for the claim.","quantity":"The quantity of NFTs to claim.","receiver":"The receiver of the NFTs to claim."}},"setClaimConditions((uint256,uint256,uint256,uint256,bytes32,uint256,address,string),bool)":{"params":{"phase":"Claim condition to set.","resetClaimEligibility":"Whether to honor the restrictions applied to wallets who have claimed tokens in the current conditions,                                  in the new claim conditions being set."}}},"version":1},"userdoc":{"kind":"user","methods":{"claim(address,uint256,address,uint256,(bytes32[],uint256,uint256,address),bytes)":{"notice":"Lets an account claim a given quantity of NFTs."},"setClaimConditions((uint256,uint256,uint256,uint256,bytes32,uint256,address,string),bool)":{"notice":"Lets a contract admin (account with `DEFAULT_ADMIN_ROLE`) set claim conditions."}},"version":1}},"settings":{"remappings":["@chainlink/=lib/chainlink/","@ds-test/=lib/ds-test/src/","@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/","@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","@std/=lib/forge-std/src/","@thirdweb-dev/dynamic-contracts/=lib/dynamic-contracts/","ERC721A-Upgradeable/=lib/ERC721A-Upgradeable/contracts/","ERC721A/=lib/ERC721A/contracts/","chainlink/=lib/chainlink/contracts/","contracts/=contracts/","ds-test/=lib/ds-test/src/","dynamic-contracts/=lib/dynamic-contracts/src/","erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/","erc721a-upgradeable/=lib/ERC721A-Upgradeable/","erc721a/=lib/ERC721A/","forge-std/=lib/forge-std/src/","lib/sstore2/=lib/dynamic-contracts/lib/sstore2/","openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/","openzeppelin-contracts/=lib/openzeppelin-contracts/","openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/","sstore2/=lib/dynamic-contracts/lib/sstore2/contracts/"],"optimizer":{"enabled":true,"runs":20},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"contracts/extension/interface/IDropSinglePhase.sol":"IDropSinglePhase"},"libraries":{}},"sources":{"contracts/extension/interface/IClaimCondition.sol":{"keccak256":"0x391e69970031edb30dfa59f8db33c7446b349cd5ec505fd99f0f0b672b19e6d6","urls":["bzz-raw://fd9eafca6098421f3aa25bf0a0b24386facc764b7ecb8e6ce4a890afa3c6d459","dweb:/ipfs/QmPXTSX2ie5wsZ6FyXWS4YMa7aPpYNyza9Rym1n799B5LU"],"license":"Apache-2.0"},"contracts/extension/interface/IDropSinglePhase.sol":{"keccak256":"0xe0a451031e98104d0f4879ec61feab4626c85b234c8db8c6cdbf5c9d4bb58a36","urls":["bzz-raw://b651b6128a69e35eadca6633bfa91529ca917edd0601537e509ba3c6056bc7a9","dweb:/ipfs/QmakTGgGyaT9MTCsxuPJmMaGBRX2sBzmKZnqqNb5oiHmnZ"],"license":"Apache-2.0"}},"version":1},"ast":{"absolutePath":"contracts/extension/interface/IDropSinglePhase.sol","id":33207,"exportedSymbols":{"IClaimCondition":[32780],"IDropSinglePhase":[33206]},"nodeType":"SourceUnit","src":"39:3042:114","nodes":[{"id":33145,"nodeType":"PragmaDirective","src":"39:23:114","nodes":[],"literals":["solidity","^","0.8",".0"]},{"id":33146,"nodeType":"ImportDirective","src":"86:31:114","nodes":[],"absolutePath":"contracts/extension/interface/IClaimCondition.sol","file":"./IClaimCondition.sol","nameLocation":"-1:-1:-1","scope":33207,"sourceUnit":32781,"symbolAliases":[],"unitAlias":""},{"id":33206,"nodeType":"ContractDefinition","src":"576:2504:114","nodes":[{"id":33160,"nodeType":"StructDefinition","src":"1049:151:114","nodes":[],"canonicalName":"IDropSinglePhase.AllowlistProof","documentation":{"id":33150,"nodeType":"StructuredDocumentation","src":"628:416:114","text":"  @param proof Proof of concerned wallet's inclusion in an allowlist.\n  @param quantityLimitPerWallet The total quantity of tokens the allowlisted wallet is eligible to claim over time.\n  @param pricePerToken The price per token the allowlisted wallet must pay to claim tokens.\n  @param currency The currency in which the allowlisted wallet must pay the price for claiming tokens."},"members":[{"constant":false,"id":33153,"mutability":"mutable","name":"proof","nameLocation":"1091:5:114","nodeType":"VariableDeclaration","scope":33160,"src":"1081:15:114","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":33151,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1081:7:114","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":33152,"nodeType":"ArrayTypeName","src":"1081:9:114","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":33155,"mutability":"mutable","name":"quantityLimitPerWallet","nameLocation":"1114:22:114","nodeType":"VariableDeclaration","scope":33160,"src":"1106:30:114","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":33154,"name":"uint256","nodeType":"ElementaryTypeName","src":"1106:7:114","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":33157,"mutability":"mutable","name":"pricePerToken","nameLocation":"1154:13:114","nodeType":"VariableDeclaration","scope":33160,"src":"1146:21:114","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":33156,"name":"uint256","nodeType":"ElementaryTypeName","src":"1146:7:114","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":33159,"mutability":"mutable","name":"currency","nameLocation":"1185:8:114","nodeType":"VariableDeclaration","scope":33160,"src":"1177:16:114","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":33158,"name":"address","nodeType":"ElementaryTypeName","src":"1177:7:114","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"AllowlistProof","nameLocation":"1056:14:114","scope":33206,"visibility":"public"},{"id":33171,"nodeType":"EventDefinition","src":"1267:164:114","nodes":[],"anonymous":false,"documentation":{"id":33161,"nodeType":"StructuredDocumentation","src":"1206:56:114","text":"@notice Emitted when tokens are claimed via `claim`."},"eventSelector":"ff097c7d8b1957a4ff09ef1361b5fb54dcede3941ba836d0beb9d10bec725de6","name":"TokensClaimed","nameLocation":"1273:13:114","parameters":{"id":33170,"nodeType":"ParameterList","parameters":[{"constant":false,"id":33163,"indexed":true,"mutability":"mutable","name":"claimer","nameLocation":"1312:7:114","nodeType":"VariableDeclaration","scope":33171,"src":"1296:23:114","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":33162,"name":"address","nodeType":"ElementaryTypeName","src":"1296:7:114","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":33165,"indexed":true,"mutability":"mutable","name":"receiver","nameLocation":"1345:8:114","nodeType":"VariableDeclaration","scope":33171,"src":"1329:24:114","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":33164,"name":"address","nodeType":"ElementaryTypeName","src":"1329:7:114","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":33167,"indexed":true,"mutability":"mutable","name":"startTokenId","nameLocation":"1379:12:114","nodeType":"VariableDeclaration","scope":33171,"src":"1363:28:114","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":33166,"name":"uint256","nodeType":"ElementaryTypeName","src":"1363:7:114","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":33169,"indexed":false,"mutability":"mutable","name":"quantityClaimed","nameLocation":"1409:15:114","nodeType":"VariableDeclaration","scope":33171,"src":"1401:23:114","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":33168,"name":"uint256","nodeType":"ElementaryTypeName","src":"1401:7:114","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1286:144:114"}},{"id":33179,"nodeType":"EventDefinition","src":"1511:77:114","nodes":[],"anonymous":false,"documentation":{"id":33172,"nodeType":"StructuredDocumentation","src":"1437:69:114","text":"@notice Emitted when the contract's claim conditions are updated."},"eventSelector":"6dab9d7d05d468100139089b2516cb8ff286c3972ff070d3b509e371f0d0d4b8","name":"ClaimConditionUpdated","nameLocation":"1517:21:114","parameters":{"id":33178,"nodeType":"ParameterList","parameters":[{"constant":false,"id":33175,"indexed":false,"mutability":"mutable","name":"condition","nameLocation":"1554:9:114","nodeType":"VariableDeclaration","scope":33179,"src":"1539:24:114","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_ClaimCondition_$32779_memory_ptr","typeString":"struct IClaimCondition.ClaimCondition"},"typeName":{"id":33174,"nodeType":"UserDefinedTypeName","pathNode":{"id":33173,"name":"ClaimCondition","nameLocations":["1539:14:114"],"nodeType":"IdentifierPath","referencedDeclaration":32779,"src":"1539:14:114"},"referencedDeclaration":32779,"src":"1539:14:114","typeDescriptions":{"typeIdentifier":"t_struct$_ClaimCondition_$32779_storage_ptr","typeString":"struct IClaimCondition.ClaimCondition"}},"visibility":"internal"},{"constant":false,"id":33177,"indexed":false,"mutability":"mutable","name":"resetEligibility","nameLocation":"1570:16:114","nodeType":"VariableDeclaration","scope":33179,"src":"1565:21:114","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":33176,"name":"bool","nodeType":"ElementaryTypeName","src":"1565:4:114","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1538:49:114"}},{"id":33196,"nodeType":"FunctionDefinition","src":"2341:222:114","nodes":[],"documentation":{"id":33180,"nodeType":"StructuredDocumentation","src":"1594:742:114","text":"  @notice Lets an account claim a given quantity of NFTs.\n  @param receiver                       The receiver of the NFTs to claim.\n  @param quantity                       The quantity of NFTs to claim.\n  @param currency                       The currency in which to pay for the claim.\n  @param pricePerToken                  The price per token to pay for the claim.\n  @param allowlistProof                 The proof of the claimer's inclusion in the merkle root allowlist\n                                        of the claim conditions that apply.\n  @param data                           Arbitrary bytes data that can be leveraged in the implementation of this interface."},"functionSelector":"84bb1e42","implemented":false,"kind":"function","modifiers":[],"name":"claim","nameLocation":"2350:5:114","parameters":{"id":33194,"nodeType":"ParameterList","parameters":[{"constant":false,"id":33182,"mutability":"mutable","name":"receiver","nameLocation":"2373:8:114","nodeType":"VariableDeclaration","scope":33196,"src":"2365:16:114","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":33181,"name":"address","nodeType":"ElementaryTypeName","src":"2365:7:114","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":33184,"mutability":"mutable","name":"quantity","nameLocation":"2399:8:114","nodeType":"VariableDeclaration","scope":33196,"src":"2391:16:114","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":33183,"name":"uint256","nodeType":"ElementaryTypeName","src":"2391:7:114","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":33186,"mutability":"mutable","name":"currency","nameLocation":"2425:8:114","nodeType":"VariableDeclaration","scope":33196,"src":"2417:16:114","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":33185,"name":"address","nodeType":"ElementaryTypeName","src":"2417:7:114","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":33188,"mutability":"mutable","name":"pricePerToken","nameLocation":"2451:13:114","nodeType":"VariableDeclaration","scope":33196,"src":"2443:21:114","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":33187,"name":"uint256","nodeType":"ElementaryTypeName","src":"2443:7:114","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":33191,"mutability":"mutable","name":"allowlistProof","nameLocation":"2498:14:114","nodeType":"VariableDeclaration","scope":33196,"src":"2474:38:114","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_AllowlistProof_$33160_calldata_ptr","typeString":"struct IDropSinglePhase.AllowlistProof"},"typeName":{"id":33190,"nodeType":"UserDefinedTypeName","pathNode":{"id":33189,"name":"AllowlistProof","nameLocations":["2474:14:114"],"nodeType":"IdentifierPath","referencedDeclaration":33160,"src":"2474:14:114"},"referencedDeclaration":33160,"src":"2474:14:114","typeDescriptions":{"typeIdentifier":"t_struct$_AllowlistProof_$33160_storage_ptr","typeString":"struct IDropSinglePhase.AllowlistProof"}},"visibility":"internal"},{"constant":false,"id":33193,"mutability":"mutable","name":"data","nameLocation":"2535:4:114","nodeType":"VariableDeclaration","scope":33196,"src":"2522:17:114","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":33192,"name":"bytes","nodeType":"ElementaryTypeName","src":"2522:5:114","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2355:190:114"},"returnParameters":{"id":33195,"nodeType":"ParameterList","parameters":[],"src":"2562:0:114"},"scope":33206,"stateMutability":"payable","virtual":false,"visibility":"external"},{"id":33205,"nodeType":"FunctionDefinition","src":"2982:96:114","nodes":[],"documentation":{"id":33197,"nodeType":"StructuredDocumentation","src":"2569:408:114","text":"  @notice Lets a contract admin (account with `DEFAULT_ADMIN_ROLE`) set claim conditions.\n  @param phase                    Claim condition to set.\n  @param resetClaimEligibility    Whether to honor the restrictions applied to wallets who have claimed tokens in the current conditions,\n                                  in the new claim conditions being set."},"functionSelector":"426cfaf3","implemented":false,"kind":"function","modifiers":[],"name":"setClaimConditions","nameLocation":"2991:18:114","parameters":{"id":33203,"nodeType":"ParameterList","parameters":[{"constant":false,"id":33200,"mutability":"mutable","name":"phase","nameLocation":"3034:5:114","nodeType":"VariableDeclaration","scope":33205,"src":"3010:29:114","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_ClaimCondition_$32779_calldata_ptr","typeString":"struct IClaimCondition.ClaimCondition"},"typeName":{"id":33199,"nodeType":"UserDefinedTypeName","pathNode":{"id":33198,"name":"ClaimCondition","nameLocations":["3010:14:114"],"nodeType":"IdentifierPath","referencedDeclaration":32779,"src":"3010:14:114"},"referencedDeclaration":32779,"src":"3010:14:114","typeDescriptions":{"typeIdentifier":"t_struct$_ClaimCondition_$32779_storage_ptr","typeString":"struct IClaimCondition.ClaimCondition"}},"visibility":"internal"},{"constant":false,"id":33202,"mutability":"mutable","name":"resetClaimEligibility","nameLocation":"3046:21:114","nodeType":"VariableDeclaration","scope":33205,"src":"3041:26:114","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":33201,"name":"bool","nodeType":"ElementaryTypeName","src":"3041:4:114","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3009:59:114"},"returnParameters":{"id":33204,"nodeType":"ParameterList","parameters":[],"src":"3077:0:114"},"scope":33206,"stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"abstract":false,"baseContracts":[{"baseName":{"id":33148,"name":"IClaimCondition","nameLocations":["606:15:114"],"nodeType":"IdentifierPath","referencedDeclaration":32780,"src":"606:15:114"},"id":33149,"nodeType":"InheritanceSpecifier","src":"606:15:114"}],"canonicalName":"IDropSinglePhase","contractDependencies":[],"contractKind":"interface","documentation":{"id":33147,"nodeType":"StructuredDocumentation","src":"119:455:114","text":"  The interface `IDropSinglePhase` is written for thirdweb's 'DropSinglePhase' contracts, which are distribution mechanisms for tokens.\n  An authorized wallet can set a claim condition for the distribution of the contract's tokens.\n  A claim condition defines criteria under which accounts can mint tokens. Claim conditions can be overwritten\n  or added to by the contract admin. At any moment, there is only one active claim condition."},"fullyImplemented":false,"linearizedBaseContracts":[33206,32780],"name":"IDropSinglePhase","nameLocation":"586:16:114","scope":33207,"usedErrors":[],"usedEvents":[33171,33179]}],"license":"Apache-2.0"},"id":114}