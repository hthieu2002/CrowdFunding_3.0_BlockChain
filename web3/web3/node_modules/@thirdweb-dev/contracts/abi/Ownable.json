{"abi":[{"type":"function","name":"owner","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"setOwner","inputs":[{"name":"_newOwner","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"event","name":"OwnerUpdated","inputs":[{"name":"prevOwner","type":"address","indexed":true,"internalType":"address"},{"name":"newOwner","type":"address","indexed":true,"internalType":"address"}],"anonymous":false}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"owner()":"8da5cb5b","setOwner(address)":"13af4035"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"prevOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"OwnerUpdated(address,address)\":{\"details\":\"Emitted when a new Owner is set.\"}},\"kind\":\"dev\",\"methods\":{\"setOwner(address)\":{\"params\":{\"_newOwner\":\"The address to set as the new owner of the contract.\"}}},\"stateVariables\":{\"_owner\":{\"details\":\"Owner of the contract (purpose: OpenSea compatibility)\"}},\"title\":\"Ownable\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"owner()\":{\"notice\":\"Returns the owner of the contract.\"},\"setOwner(address)\":{\"notice\":\"Lets an authorized wallet set a new owner for the contract.\"}},\"notice\":\"Thirdweb's `Ownable` is a contract extension to be used with any base contract. It exposes functions for setting and reading           who the 'owner' of the inheriting smart contract is, and lets the inheriting contract perform conditional logic that uses           information about who the contract's owner is.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/extension/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[\":@chainlink/=lib/chainlink/\",\":@ds-test/=lib/ds-test/src/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@std/=lib/forge-std/src/\",\":@thirdweb-dev/dynamic-contracts/=lib/dynamic-contracts/\",\":ERC721A-Upgradeable/=lib/ERC721A-Upgradeable/contracts/\",\":ERC721A/=lib/ERC721A/contracts/\",\":chainlink/=lib/chainlink/contracts/\",\":contracts/=contracts/\",\":ds-test/=lib/ds-test/src/\",\":dynamic-contracts/=lib/dynamic-contracts/src/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":erc721a-upgradeable/=lib/ERC721A-Upgradeable/\",\":erc721a/=lib/ERC721A/\",\":forge-std/=lib/forge-std/src/\",\":lib/sstore2/=lib/dynamic-contracts/lib/sstore2/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sstore2/=lib/dynamic-contracts/lib/sstore2/contracts/\"]},\"sources\":{\"contracts/extension/Ownable.sol\":{\"keccak256\":\"0x45447691686861237d5e1acb9d723d861a3fb3d561335e4f385d1547f25e27a5\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://5142293e36c736f744c73aaecab5f7be8e2d5ac70acc67851e0cea5171fd6782\",\"dweb:/ipfs/QmVJT5B84o5vFc5E2VteZdBhrT1HMutc7Ax72UKD1aZatJ\"]},\"contracts/extension/interface/IOwnable.sol\":{\"keccak256\":\"0xd659a64da6264fdd50ee379be032fea4917eba4fadfd6d366107fb17e46907f3\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://c15940c4a3d229f4fdd1226fe297a58fde10b07b86a34de1ed11a8802dd5dea9\",\"dweb:/ipfs/QmS8p8CxWiahLkYsCWNhFjCnmQzuc4ck3kjYYuCFj8LsmC\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.23+commit.f704f362"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"prevOwner","type":"address","indexed":true},{"internalType":"address","name":"newOwner","type":"address","indexed":true}],"type":"event","name":"OwnerUpdated","anonymous":false},{"inputs":[],"stateMutability":"view","type":"function","name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[{"internalType":"address","name":"_newOwner","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"setOwner"}],"devdoc":{"kind":"dev","methods":{"setOwner(address)":{"params":{"_newOwner":"The address to set as the new owner of the contract."}}},"version":1},"userdoc":{"kind":"user","methods":{"owner()":{"notice":"Returns the owner of the contract."},"setOwner(address)":{"notice":"Lets an authorized wallet set a new owner for the contract."}},"version":1}},"settings":{"remappings":["@chainlink/=lib/chainlink/","@ds-test/=lib/ds-test/src/","@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/","@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","@std/=lib/forge-std/src/","@thirdweb-dev/dynamic-contracts/=lib/dynamic-contracts/","ERC721A-Upgradeable/=lib/ERC721A-Upgradeable/contracts/","ERC721A/=lib/ERC721A/contracts/","chainlink/=lib/chainlink/contracts/","contracts/=contracts/","ds-test/=lib/ds-test/src/","dynamic-contracts/=lib/dynamic-contracts/src/","erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/","erc721a-upgradeable/=lib/ERC721A-Upgradeable/","erc721a/=lib/ERC721A/","forge-std/=lib/forge-std/src/","lib/sstore2/=lib/dynamic-contracts/lib/sstore2/","openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/","openzeppelin-contracts/=lib/openzeppelin-contracts/","openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/","sstore2/=lib/dynamic-contracts/lib/sstore2/contracts/"],"optimizer":{"enabled":true,"runs":20},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"contracts/extension/Ownable.sol":"Ownable"},"libraries":{}},"sources":{"contracts/extension/Ownable.sol":{"keccak256":"0x45447691686861237d5e1acb9d723d861a3fb3d561335e4f385d1547f25e27a5","urls":["bzz-raw://5142293e36c736f744c73aaecab5f7be8e2d5ac70acc67851e0cea5171fd6782","dweb:/ipfs/QmVJT5B84o5vFc5E2VteZdBhrT1HMutc7Ax72UKD1aZatJ"],"license":"Apache-2.0"},"contracts/extension/interface/IOwnable.sol":{"keccak256":"0xd659a64da6264fdd50ee379be032fea4917eba4fadfd6d366107fb17e46907f3","urls":["bzz-raw://c15940c4a3d229f4fdd1226fe297a58fde10b07b86a34de1ed11a8802dd5dea9","dweb:/ipfs/QmS8p8CxWiahLkYsCWNhFjCnmQzuc4ck3kjYYuCFj8LsmC"],"license":"Apache-2.0"}},"version":1},"ast":{"absolutePath":"contracts/extension/Ownable.sol","id":21614,"exportedSymbols":{"IOwnable":[33683],"Ownable":[21613]},"nodeType":"SourceUnit","src":"39:1702:70","nodes":[{"id":21533,"nodeType":"PragmaDirective","src":"39:23:70","nodes":[],"literals":["solidity","^","0.8",".0"]},{"id":21534,"nodeType":"ImportDirective","src":"86:34:70","nodes":[],"absolutePath":"contracts/extension/interface/IOwnable.sol","file":"./interface/IOwnable.sol","nameLocation":"-1:-1:-1","scope":21614,"sourceUnit":33684,"symbolAliases":[],"unitAlias":""},{"id":21613,"nodeType":"ContractDefinition","src":"485:1255:70","nodes":[{"id":21540,"nodeType":"VariableDeclaration","src":"597:22:70","nodes":[],"constant":false,"documentation":{"id":21538,"nodeType":"StructuredDocumentation","src":"529:63:70","text":"@dev Owner of the contract (purpose: OpenSea compatibility)"},"mutability":"mutable","name":"_owner","nameLocation":"613:6:70","scope":21613,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":21539,"name":"address","nodeType":"ElementaryTypeName","src":"597:7:70","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"id":21555,"nodeType":"ModifierDefinition","src":"675:123:70","nodes":[],"body":{"id":21554,"nodeType":"Block","src":"696:102:70","nodes":[],"statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":21546,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":21543,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"710:3:70","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":21544,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"714:6:70","memberName":"sender","nodeType":"MemberAccess","src":"710:10:70","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":21545,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":21540,"src":"724:6:70","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"710:20:70","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":21552,"nodeType":"IfStatement","src":"706:75:70","trueBody":{"id":21551,"nodeType":"Block","src":"732:49:70","statements":[{"expression":{"arguments":[{"hexValue":"4e6f7420617574686f72697a6564","id":21548,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"753:16:70","typeDescriptions":{"typeIdentifier":"t_stringliteral_fac3bac318c0d00994f57b0f2f4c643c313072b71db2302bf4b900309cc50b36","typeString":"literal_string \"Not authorized\""},"value":"Not authorized"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_fac3bac318c0d00994f57b0f2f4c643c313072b71db2302bf4b900309cc50b36","typeString":"literal_string \"Not authorized\""}],"id":21547,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"746:6:70","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":21549,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"746:24:70","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":21550,"nodeType":"ExpressionStatement","src":"746:24:70"}]}},{"id":21553,"nodeType":"PlaceholderStatement","src":"790:1:70"}]},"documentation":{"id":21541,"nodeType":"StructuredDocumentation","src":"626:44:70","text":"@dev Reverts if caller is not the owner."},"name":"onlyOwner","nameLocation":"684:9:70","parameters":{"id":21542,"nodeType":"ParameterList","parameters":[],"src":"693:2:70"},"virtual":false,"visibility":"internal"},{"id":21565,"nodeType":"FunctionDefinition","src":"871:86:70","nodes":[],"body":{"id":21564,"nodeType":"Block","src":"927:30:70","nodes":[],"statements":[{"expression":{"id":21562,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":21540,"src":"944:6:70","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":21561,"id":21563,"nodeType":"Return","src":"937:13:70"}]},"baseFunctions":[33669],"documentation":{"id":21556,"nodeType":"StructuredDocumentation","src":"804:62:70","text":"  @notice Returns the owner of the contract."},"functionSelector":"8da5cb5b","implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"880:5:70","overrides":{"id":21558,"nodeType":"OverrideSpecifier","overrides":[],"src":"900:8:70"},"parameters":{"id":21557,"nodeType":"ParameterList","parameters":[],"src":"885:2:70"},"returnParameters":{"id":21561,"nodeType":"ParameterList","parameters":[{"constant":false,"id":21560,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":21565,"src":"918:7:70","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":21559,"name":"address","nodeType":"ElementaryTypeName","src":"918:7:70","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"917:9:70"},"scope":21613,"stateMutability":"view","virtual":false,"visibility":"public"},{"id":21586,"nodeType":"FunctionDefinition","src":"1133:173:70","nodes":[],"body":{"id":21585,"nodeType":"Block","src":"1188:118:70","nodes":[],"statements":[{"condition":{"id":21574,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"1202:15:70","subExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":21572,"name":"_canSetOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":21612,"src":"1203:12:70","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bool_$","typeString":"function () view returns (bool)"}},"id":21573,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1203:14:70","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":21580,"nodeType":"IfStatement","src":"1198:70:70","trueBody":{"id":21579,"nodeType":"Block","src":"1219:49:70","statements":[{"expression":{"arguments":[{"hexValue":"4e6f7420617574686f72697a6564","id":21576,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1240:16:70","typeDescriptions":{"typeIdentifier":"t_stringliteral_fac3bac318c0d00994f57b0f2f4c643c313072b71db2302bf4b900309cc50b36","typeString":"literal_string \"Not authorized\""},"value":"Not authorized"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_fac3bac318c0d00994f57b0f2f4c643c313072b71db2302bf4b900309cc50b36","typeString":"literal_string \"Not authorized\""}],"id":21575,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"1233:6:70","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":21577,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1233:24:70","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":21578,"nodeType":"ExpressionStatement","src":"1233:24:70"}]}},{"expression":{"arguments":[{"id":21582,"name":"_newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":21568,"src":"1289:9:70","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":21581,"name":"_setupOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":21606,"src":"1277:11:70","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":21583,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1277:22:70","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":21584,"nodeType":"ExpressionStatement","src":"1277:22:70"}]},"baseFunctions":[33675],"documentation":{"id":21566,"nodeType":"StructuredDocumentation","src":"963:165:70","text":"  @notice Lets an authorized wallet set a new owner for the contract.\n  @param _newOwner The address to set as the new owner of the contract."},"functionSelector":"13af4035","implemented":true,"kind":"function","modifiers":[],"name":"setOwner","nameLocation":"1142:8:70","overrides":{"id":21570,"nodeType":"OverrideSpecifier","overrides":[],"src":"1179:8:70"},"parameters":{"id":21569,"nodeType":"ParameterList","parameters":[{"constant":false,"id":21568,"mutability":"mutable","name":"_newOwner","nameLocation":"1159:9:70","nodeType":"VariableDeclaration","scope":21586,"src":"1151:17:70","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":21567,"name":"address","nodeType":"ElementaryTypeName","src":"1151:7:70","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1150:19:70"},"returnParameters":{"id":21571,"nodeType":"ParameterList","parameters":[],"src":"1188:0:70"},"scope":21613,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":21606,"nodeType":"FunctionDefinition","src":"1421:172:70","nodes":[],"body":{"id":21605,"nodeType":"Block","src":"1470:123:70","nodes":[],"statements":[{"assignments":[21593],"declarations":[{"constant":false,"id":21593,"mutability":"mutable","name":"_prevOwner","nameLocation":"1488:10:70","nodeType":"VariableDeclaration","scope":21605,"src":"1480:18:70","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":21592,"name":"address","nodeType":"ElementaryTypeName","src":"1480:7:70","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":21595,"initialValue":{"id":21594,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":21540,"src":"1501:6:70","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"1480:27:70"},{"expression":{"id":21598,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":21596,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":21540,"src":"1517:6:70","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":21597,"name":"_newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":21589,"src":"1526:9:70","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1517:18:70","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":21599,"nodeType":"ExpressionStatement","src":"1517:18:70"},{"eventCall":{"arguments":[{"id":21601,"name":"_prevOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":21593,"src":"1564:10:70","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":21602,"name":"_newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":21589,"src":"1576:9:70","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":21600,"name":"OwnerUpdated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":33682,"src":"1551:12:70","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":21603,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1551:35:70","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":21604,"nodeType":"EmitStatement","src":"1546:40:70"}]},"documentation":{"id":21587,"nodeType":"StructuredDocumentation","src":"1312:104:70","text":"@dev Lets a contract admin set a new owner for the contract. The new owner must be a contract admin."},"implemented":true,"kind":"function","modifiers":[],"name":"_setupOwner","nameLocation":"1430:11:70","parameters":{"id":21590,"nodeType":"ParameterList","parameters":[{"constant":false,"id":21589,"mutability":"mutable","name":"_newOwner","nameLocation":"1450:9:70","nodeType":"VariableDeclaration","scope":21606,"src":"1442:17:70","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":21588,"name":"address","nodeType":"ElementaryTypeName","src":"1442:7:70","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1441:19:70"},"returnParameters":{"id":21591,"nodeType":"ParameterList","parameters":[],"src":"1470:0:70"},"scope":21613,"stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"id":21612,"nodeType":"FunctionDefinition","src":"1677:61:70","nodes":[],"documentation":{"id":21607,"nodeType":"StructuredDocumentation","src":"1599:73:70","text":"@dev Returns whether owner can be set in the given execution context."},"implemented":false,"kind":"function","modifiers":[],"name":"_canSetOwner","nameLocation":"1686:12:70","parameters":{"id":21608,"nodeType":"ParameterList","parameters":[],"src":"1698:2:70"},"returnParameters":{"id":21611,"nodeType":"ParameterList","parameters":[{"constant":false,"id":21610,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":21612,"src":"1732:4:70","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":21609,"name":"bool","nodeType":"ElementaryTypeName","src":"1732:4:70","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1731:6:70"},"scope":21613,"stateMutability":"view","virtual":true,"visibility":"internal"}],"abstract":true,"baseContracts":[{"baseName":{"id":21536,"name":"IOwnable","nameLocations":["514:8:70"],"nodeType":"IdentifierPath","referencedDeclaration":33683,"src":"514:8:70"},"id":21537,"nodeType":"InheritanceSpecifier","src":"514:8:70"}],"canonicalName":"Ownable","contractDependencies":[],"contractKind":"contract","documentation":{"id":21535,"nodeType":"StructuredDocumentation","src":"122:361:70","text":"  @title   Ownable\n  @notice  Thirdweb's `Ownable` is a contract extension to be used with any base contract. It exposes functions for setting and reading\n           who the 'owner' of the inheriting smart contract is, and lets the inheriting contract perform conditional logic that uses\n           information about who the contract's owner is."},"fullyImplemented":false,"linearizedBaseContracts":[21613,33683],"name":"Ownable","nameLocation":"503:7:70","scope":21614,"usedErrors":[],"usedEvents":[33682]}],"license":"Apache-2.0"},"id":70}