{"abi":[{"type":"function","name":"setClaimConditions","inputs":[{"name":"phase","type":"tuple","internalType":"struct IClaimCondition.ClaimCondition","components":[{"name":"startTimestamp","type":"uint256","internalType":"uint256"},{"name":"maxClaimableSupply","type":"uint256","internalType":"uint256"},{"name":"supplyClaimed","type":"uint256","internalType":"uint256"},{"name":"quantityLimitPerWallet","type":"uint256","internalType":"uint256"},{"name":"merkleRoot","type":"bytes32","internalType":"bytes32"},{"name":"pricePerToken","type":"uint256","internalType":"uint256"},{"name":"currency","type":"address","internalType":"address"},{"name":"metadata","type":"string","internalType":"string"}]},{"name":"resetClaimEligibility","type":"bool","internalType":"bool"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"event","name":"ClaimConditionUpdated","inputs":[{"name":"claimConditions","type":"tuple","indexed":false,"internalType":"struct IClaimCondition.ClaimCondition","components":[{"name":"startTimestamp","type":"uint256","internalType":"uint256"},{"name":"maxClaimableSupply","type":"uint256","internalType":"uint256"},{"name":"supplyClaimed","type":"uint256","internalType":"uint256"},{"name":"quantityLimitPerWallet","type":"uint256","internalType":"uint256"},{"name":"merkleRoot","type":"bytes32","internalType":"bytes32"},{"name":"pricePerToken","type":"uint256","internalType":"uint256"},{"name":"currency","type":"address","internalType":"address"},{"name":"metadata","type":"string","internalType":"string"}]},{"name":"resetClaimEligibility","type":"bool","indexed":false,"internalType":"bool"}],"anonymous":false}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"setClaimConditions((uint256,uint256,uint256,uint256,bytes32,uint256,address,string),bool)":"426cfaf3"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxClaimableSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantityLimitPerWallet\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"pricePerToken\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"indexed\":false,\"internalType\":\"struct IClaimCondition.ClaimCondition\",\"name\":\"claimConditions\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"resetClaimEligibility\",\"type\":\"bool\"}],\"name\":\"ClaimConditionUpdated\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxClaimableSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantityLimitPerWallet\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"pricePerToken\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"internalType\":\"struct IClaimCondition.ClaimCondition\",\"name\":\"phase\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"resetClaimEligibility\",\"type\":\"bool\"}],\"name\":\"setClaimConditions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"setClaimConditions((uint256,uint256,uint256,uint256,bytes32,uint256,address,string),bool)\":{\"params\":{\"phase\":\"Claim conditions in ascending order by `startTimestamp`.\",\"resetClaimEligibility\":\"Whether to reset `limitLastClaimTimestamp` and `limitMerkleProofClaim` values when setting new                                  claim conditions.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"setClaimConditions((uint256,uint256,uint256,uint256,bytes32,uint256,address,string),bool)\":{\"notice\":\"Lets a contract admin (account with `DEFAULT_ADMIN_ROLE`) set claim conditions.\"}},\"notice\":\"Thirdweb's 'Drop' contracts are distribution mechanisms for tokens.  A contract admin (i.e. a holder of `DEFAULT_ADMIN_ROLE`) can set a series of claim conditions,  ordered by their respective `startTimestamp`. A claim condition defines criteria under which  accounts can mint tokens. Claim conditions can be overwritten or added to by the contract admin.  At any moment, there is only one active claim condition.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/extension/interface/IClaimConditionsSinglePhase.sol\":\"IClaimConditionsSinglePhase\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[\":@chainlink/=lib/chainlink/\",\":@ds-test/=lib/ds-test/src/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@std/=lib/forge-std/src/\",\":@thirdweb-dev/dynamic-contracts/=lib/dynamic-contracts/\",\":ERC721A-Upgradeable/=lib/ERC721A-Upgradeable/contracts/\",\":ERC721A/=lib/ERC721A/contracts/\",\":chainlink/=lib/chainlink/contracts/\",\":contracts/=contracts/\",\":ds-test/=lib/ds-test/src/\",\":dynamic-contracts/=lib/dynamic-contracts/src/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":erc721a-upgradeable/=lib/ERC721A-Upgradeable/\",\":erc721a/=lib/ERC721A/\",\":forge-std/=lib/forge-std/src/\",\":lib/sstore2/=lib/dynamic-contracts/lib/sstore2/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sstore2/=lib/dynamic-contracts/lib/sstore2/contracts/\"]},\"sources\":{\"contracts/extension/interface/IClaimCondition.sol\":{\"keccak256\":\"0x391e69970031edb30dfa59f8db33c7446b349cd5ec505fd99f0f0b672b19e6d6\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://fd9eafca6098421f3aa25bf0a0b24386facc764b7ecb8e6ce4a890afa3c6d459\",\"dweb:/ipfs/QmPXTSX2ie5wsZ6FyXWS4YMa7aPpYNyza9Rym1n799B5LU\"]},\"contracts/extension/interface/IClaimConditionsSinglePhase.sol\":{\"keccak256\":\"0xeda4b4df9ddb9e3b1e98173574769b523a25f8beb62776d08ec67a2558f8861a\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://31a8a23c12d9df06ce9a13941ef711f911decae65bf916c5f54207c030d62375\",\"dweb:/ipfs/QmWdDiFpH8vEPVYv3rDQg1zuY13WEXf52xTHbx1wr6rUwa\"]},\"contracts/lib/BitMaps.sol\":{\"keccak256\":\"0x57bcd40ce09b6f61a8643b4f97631ad929c7c0ac00dedb5ad62f9375052a9d17\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://8da26049d81a82f6d45034fd596bb0f2eea790fc568d4df98cf439fe03bb350d\",\"dweb:/ipfs/QmV1PqxvWM9RvDfP4JsSYF666rjX3ow5VyYUszG9UqMohL\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.23+commit.f704f362"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"struct IClaimCondition.ClaimCondition","name":"claimConditions","type":"tuple","components":[{"internalType":"uint256","name":"startTimestamp","type":"uint256"},{"internalType":"uint256","name":"maxClaimableSupply","type":"uint256"},{"internalType":"uint256","name":"supplyClaimed","type":"uint256"},{"internalType":"uint256","name":"quantityLimitPerWallet","type":"uint256"},{"internalType":"bytes32","name":"merkleRoot","type":"bytes32"},{"internalType":"uint256","name":"pricePerToken","type":"uint256"},{"internalType":"address","name":"currency","type":"address"},{"internalType":"string","name":"metadata","type":"string"}],"indexed":false},{"internalType":"bool","name":"resetClaimEligibility","type":"bool","indexed":false}],"type":"event","name":"ClaimConditionUpdated","anonymous":false},{"inputs":[{"internalType":"struct IClaimCondition.ClaimCondition","name":"phase","type":"tuple","components":[{"internalType":"uint256","name":"startTimestamp","type":"uint256"},{"internalType":"uint256","name":"maxClaimableSupply","type":"uint256"},{"internalType":"uint256","name":"supplyClaimed","type":"uint256"},{"internalType":"uint256","name":"quantityLimitPerWallet","type":"uint256"},{"internalType":"bytes32","name":"merkleRoot","type":"bytes32"},{"internalType":"uint256","name":"pricePerToken","type":"uint256"},{"internalType":"address","name":"currency","type":"address"},{"internalType":"string","name":"metadata","type":"string"}]},{"internalType":"bool","name":"resetClaimEligibility","type":"bool"}],"stateMutability":"nonpayable","type":"function","name":"setClaimConditions"}],"devdoc":{"kind":"dev","methods":{"setClaimConditions((uint256,uint256,uint256,uint256,bytes32,uint256,address,string),bool)":{"params":{"phase":"Claim conditions in ascending order by `startTimestamp`.","resetClaimEligibility":"Whether to reset `limitLastClaimTimestamp` and `limitMerkleProofClaim` values when setting new                                  claim conditions."}}},"version":1},"userdoc":{"kind":"user","methods":{"setClaimConditions((uint256,uint256,uint256,uint256,bytes32,uint256,address,string),bool)":{"notice":"Lets a contract admin (account with `DEFAULT_ADMIN_ROLE`) set claim conditions."}},"version":1}},"settings":{"remappings":["@chainlink/=lib/chainlink/","@ds-test/=lib/ds-test/src/","@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/","@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","@std/=lib/forge-std/src/","@thirdweb-dev/dynamic-contracts/=lib/dynamic-contracts/","ERC721A-Upgradeable/=lib/ERC721A-Upgradeable/contracts/","ERC721A/=lib/ERC721A/contracts/","chainlink/=lib/chainlink/contracts/","contracts/=contracts/","ds-test/=lib/ds-test/src/","dynamic-contracts/=lib/dynamic-contracts/src/","erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/","erc721a-upgradeable/=lib/ERC721A-Upgradeable/","erc721a/=lib/ERC721A/","forge-std/=lib/forge-std/src/","lib/sstore2/=lib/dynamic-contracts/lib/sstore2/","openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/","openzeppelin-contracts/=lib/openzeppelin-contracts/","openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/","sstore2/=lib/dynamic-contracts/lib/sstore2/contracts/"],"optimizer":{"enabled":true,"runs":20},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"contracts/extension/interface/IClaimConditionsSinglePhase.sol":"IClaimConditionsSinglePhase"},"libraries":{}},"sources":{"contracts/extension/interface/IClaimCondition.sol":{"keccak256":"0x391e69970031edb30dfa59f8db33c7446b349cd5ec505fd99f0f0b672b19e6d6","urls":["bzz-raw://fd9eafca6098421f3aa25bf0a0b24386facc764b7ecb8e6ce4a890afa3c6d459","dweb:/ipfs/QmPXTSX2ie5wsZ6FyXWS4YMa7aPpYNyza9Rym1n799B5LU"],"license":"Apache-2.0"},"contracts/extension/interface/IClaimConditionsSinglePhase.sol":{"keccak256":"0xeda4b4df9ddb9e3b1e98173574769b523a25f8beb62776d08ec67a2558f8861a","urls":["bzz-raw://31a8a23c12d9df06ce9a13941ef711f911decae65bf916c5f54207c030d62375","dweb:/ipfs/QmWdDiFpH8vEPVYv3rDQg1zuY13WEXf52xTHbx1wr6rUwa"],"license":"Apache-2.0"},"contracts/lib/BitMaps.sol":{"keccak256":"0x57bcd40ce09b6f61a8643b4f97631ad929c7c0ac00dedb5ad62f9375052a9d17","urls":["bzz-raw://8da26049d81a82f6d45034fd596bb0f2eea790fc568d4df98cf439fe03bb350d","dweb:/ipfs/QmV1PqxvWM9RvDfP4JsSYF666rjX3ow5VyYUszG9UqMohL"],"license":"Apache-2.0"}},"version":1},"ast":{"absolutePath":"contracts/extension/interface/IClaimConditionsSinglePhase.sol","id":32829,"exportedSymbols":{"BitMaps":[64751],"IClaimCondition":[32780],"IClaimConditionsSinglePhase":[32828]},"nodeType":"SourceUnit","src":"39:1232:105","nodes":[{"id":32806,"nodeType":"PragmaDirective","src":"39:23:105","nodes":[],"literals":["solidity","^","0.8",".0"]},{"id":32807,"nodeType":"ImportDirective","src":"86:31:105","nodes":[],"absolutePath":"contracts/lib/BitMaps.sol","file":"../../lib/BitMaps.sol","nameLocation":"-1:-1:-1","scope":32829,"sourceUnit":64752,"symbolAliases":[],"unitAlias":""},{"id":32808,"nodeType":"ImportDirective","src":"118:31:105","nodes":[],"absolutePath":"contracts/extension/interface/IClaimCondition.sol","file":"./IClaimCondition.sol","nameLocation":"-1:-1:-1","scope":32829,"sourceUnit":32781,"symbolAliases":[],"unitAlias":""},{"id":32828,"nodeType":"ContractDefinition","src":"593:677:105","nodes":[{"id":32818,"nodeType":"EventDefinition","src":"656:88:105","nodes":[],"anonymous":false,"eventSelector":"6dab9d7d05d468100139089b2516cb8ff286c3972ff070d3b509e371f0d0d4b8","name":"ClaimConditionUpdated","nameLocation":"662:21:105","parameters":{"id":32817,"nodeType":"ParameterList","parameters":[{"constant":false,"id":32814,"indexed":false,"mutability":"mutable","name":"claimConditions","nameLocation":"699:15:105","nodeType":"VariableDeclaration","scope":32818,"src":"684:30:105","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_ClaimCondition_$32779_memory_ptr","typeString":"struct IClaimCondition.ClaimCondition"},"typeName":{"id":32813,"nodeType":"UserDefinedTypeName","pathNode":{"id":32812,"name":"ClaimCondition","nameLocations":["684:14:105"],"nodeType":"IdentifierPath","referencedDeclaration":32779,"src":"684:14:105"},"referencedDeclaration":32779,"src":"684:14:105","typeDescriptions":{"typeIdentifier":"t_struct$_ClaimCondition_$32779_storage_ptr","typeString":"struct IClaimCondition.ClaimCondition"}},"visibility":"internal"},{"constant":false,"id":32816,"indexed":false,"mutability":"mutable","name":"resetClaimEligibility","nameLocation":"721:21:105","nodeType":"VariableDeclaration","scope":32818,"src":"716:26:105","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":32815,"name":"bool","nodeType":"ElementaryTypeName","src":"716:4:105","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"683:60:105"}},{"id":32827,"nodeType":"FunctionDefinition","src":"1172:96:105","nodes":[],"documentation":{"id":32819,"nodeType":"StructuredDocumentation","src":"750:417:105","text":"  @notice Lets a contract admin (account with `DEFAULT_ADMIN_ROLE`) set claim conditions.\n  @param phase                   Claim conditions in ascending order by `startTimestamp`.\n  @param resetClaimEligibility    Whether to reset `limitLastClaimTimestamp` and `limitMerkleProofClaim` values when setting new\n                                  claim conditions."},"functionSelector":"426cfaf3","implemented":false,"kind":"function","modifiers":[],"name":"setClaimConditions","nameLocation":"1181:18:105","parameters":{"id":32825,"nodeType":"ParameterList","parameters":[{"constant":false,"id":32822,"mutability":"mutable","name":"phase","nameLocation":"1224:5:105","nodeType":"VariableDeclaration","scope":32827,"src":"1200:29:105","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_ClaimCondition_$32779_calldata_ptr","typeString":"struct IClaimCondition.ClaimCondition"},"typeName":{"id":32821,"nodeType":"UserDefinedTypeName","pathNode":{"id":32820,"name":"ClaimCondition","nameLocations":["1200:14:105"],"nodeType":"IdentifierPath","referencedDeclaration":32779,"src":"1200:14:105"},"referencedDeclaration":32779,"src":"1200:14:105","typeDescriptions":{"typeIdentifier":"t_struct$_ClaimCondition_$32779_storage_ptr","typeString":"struct IClaimCondition.ClaimCondition"}},"visibility":"internal"},{"constant":false,"id":32824,"mutability":"mutable","name":"resetClaimEligibility","nameLocation":"1236:21:105","nodeType":"VariableDeclaration","scope":32827,"src":"1231:26:105","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":32823,"name":"bool","nodeType":"ElementaryTypeName","src":"1231:4:105","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1199:59:105"},"returnParameters":{"id":32826,"nodeType":"ParameterList","parameters":[],"src":"1267:0:105"},"scope":32828,"stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"abstract":false,"baseContracts":[{"baseName":{"id":32810,"name":"IClaimCondition","nameLocations":["634:15:105"],"nodeType":"IdentifierPath","referencedDeclaration":32780,"src":"634:15:105"},"id":32811,"nodeType":"InheritanceSpecifier","src":"634:15:105"}],"canonicalName":"IClaimConditionsSinglePhase","contractDependencies":[],"contractKind":"interface","documentation":{"id":32809,"nodeType":"StructuredDocumentation","src":"151:440:105","text":"  Thirdweb's 'Drop' contracts are distribution mechanisms for tokens.\n  A contract admin (i.e. a holder of `DEFAULT_ADMIN_ROLE`) can set a series of claim conditions,\n  ordered by their respective `startTimestamp`. A claim condition defines criteria under which\n  accounts can mint tokens. Claim conditions can be overwritten or added to by the contract admin.\n  At any moment, there is only one active claim condition."},"fullyImplemented":false,"linearizedBaseContracts":[32828,32780],"name":"IClaimConditionsSinglePhase","nameLocation":"603:27:105","scope":32829,"usedErrors":[],"usedEvents":[32818]}],"license":"Apache-2.0"},"id":105}