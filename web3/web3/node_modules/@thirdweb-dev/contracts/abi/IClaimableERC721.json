{"abi":[{"type":"function","name":"claim","inputs":[{"name":"_receiver","type":"address","internalType":"address"},{"name":"_quantity","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"payable"},{"type":"function","name":"verifyClaim","inputs":[{"name":"_claimer","type":"address","internalType":"address"},{"name":"_quantity","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"view"},{"type":"event","name":"TokensClaimed","inputs":[{"name":"claimer","type":"address","indexed":true,"internalType":"address"},{"name":"receiver","type":"address","indexed":true,"internalType":"address"},{"name":"startTokenId","type":"uint256","indexed":true,"internalType":"uint256"},{"name":"quantityClaimed","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"claim(address,uint256)":"aad3ec96","verifyClaim(address,uint256)":"2f92023a"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"startTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantityClaimed\",\"type\":\"uint256\"}],\"name\":\"TokensClaimed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_claimer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"verifyClaim\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"thirdweb\",\"events\":{\"TokensClaimed(address,address,uint256,uint256)\":{\"details\":\"Emitted when tokens are claimed\"}},\"kind\":\"dev\",\"methods\":{\"claim(address,uint256)\":{\"details\":\"The logic in the `verifyClaim` function determines whether the caller is authorized to mint NFTs.\",\"params\":{\"_quantity\":\"The number of NFTs to mint.\",\"_receiver\":\"The recipient of the NFT to mint.\"}},\"verifyClaim(address,uint256)\":{\"details\":\"Checks a request to claim NFTs against a custom condition.\",\"params\":{\"_claimer\":\"Caller of the claim function.\",\"_quantity\":\"The number of NFTs being claimed.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claim(address,uint256)\":{\"notice\":\"Lets an address claim multiple lazy minted NFTs at once to a recipient.                   Contract creators should override this function to create custom logic for claiming,                   for e.g. price collection, allowlist, max quantity, etc.\"},\"verifyClaim(address,uint256)\":{\"notice\":\"Override this function to add logic for claim verification, based on conditions                   such as allowlist, price, max quantity etc.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/extension/interface/IClaimableERC721.sol\":\"IClaimableERC721\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[\":@chainlink/=lib/chainlink/\",\":@ds-test/=lib/ds-test/src/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@std/=lib/forge-std/src/\",\":@thirdweb-dev/dynamic-contracts/=lib/dynamic-contracts/\",\":ERC721A-Upgradeable/=lib/ERC721A-Upgradeable/contracts/\",\":ERC721A/=lib/ERC721A/contracts/\",\":chainlink/=lib/chainlink/contracts/\",\":contracts/=contracts/\",\":ds-test/=lib/ds-test/src/\",\":dynamic-contracts/=lib/dynamic-contracts/src/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":erc721a-upgradeable/=lib/ERC721A-Upgradeable/\",\":erc721a/=lib/ERC721A/\",\":forge-std/=lib/forge-std/src/\",\":lib/sstore2/=lib/dynamic-contracts/lib/sstore2/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sstore2/=lib/dynamic-contracts/lib/sstore2/contracts/\"]},\"sources\":{\"contracts/extension/interface/IClaimableERC721.sol\":{\"keccak256\":\"0x867213bc7e2ad03ab3a1bc6f7bb4928ef9dbf2f80007f2db330703c62c24e960\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://3df6a8ffcfb67316f7c5f142542098c4ab6276902cda76e3ed3e7080b96dd929\",\"dweb:/ipfs/QmaT2N7Y4sg2h9Weyp3ASnbAdiFEoqSRhdAciweEoGxj9Y\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.23+commit.f704f362"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"claimer","type":"address","indexed":true},{"internalType":"address","name":"receiver","type":"address","indexed":true},{"internalType":"uint256","name":"startTokenId","type":"uint256","indexed":true},{"internalType":"uint256","name":"quantityClaimed","type":"uint256","indexed":false}],"type":"event","name":"TokensClaimed","anonymous":false},{"inputs":[{"internalType":"address","name":"_receiver","type":"address"},{"internalType":"uint256","name":"_quantity","type":"uint256"}],"stateMutability":"payable","type":"function","name":"claim"},{"inputs":[{"internalType":"address","name":"_claimer","type":"address"},{"internalType":"uint256","name":"_quantity","type":"uint256"}],"stateMutability":"view","type":"function","name":"verifyClaim"}],"devdoc":{"kind":"dev","methods":{"claim(address,uint256)":{"details":"The logic in the `verifyClaim` function determines whether the caller is authorized to mint NFTs.","params":{"_quantity":"The number of NFTs to mint.","_receiver":"The recipient of the NFT to mint."}},"verifyClaim(address,uint256)":{"details":"Checks a request to claim NFTs against a custom condition.","params":{"_claimer":"Caller of the claim function.","_quantity":"The number of NFTs being claimed."}}},"version":1},"userdoc":{"kind":"user","methods":{"claim(address,uint256)":{"notice":"Lets an address claim multiple lazy minted NFTs at once to a recipient.                   Contract creators should override this function to create custom logic for claiming,                   for e.g. price collection, allowlist, max quantity, etc."},"verifyClaim(address,uint256)":{"notice":"Override this function to add logic for claim verification, based on conditions                   such as allowlist, price, max quantity etc."}},"version":1}},"settings":{"remappings":["@chainlink/=lib/chainlink/","@ds-test/=lib/ds-test/src/","@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/","@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","@std/=lib/forge-std/src/","@thirdweb-dev/dynamic-contracts/=lib/dynamic-contracts/","ERC721A-Upgradeable/=lib/ERC721A-Upgradeable/contracts/","ERC721A/=lib/ERC721A/contracts/","chainlink/=lib/chainlink/contracts/","contracts/=contracts/","ds-test/=lib/ds-test/src/","dynamic-contracts/=lib/dynamic-contracts/src/","erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/","erc721a-upgradeable/=lib/ERC721A-Upgradeable/","erc721a/=lib/ERC721A/","forge-std/=lib/forge-std/src/","lib/sstore2/=lib/dynamic-contracts/lib/sstore2/","openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/","openzeppelin-contracts/=lib/openzeppelin-contracts/","openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/","sstore2/=lib/dynamic-contracts/lib/sstore2/contracts/"],"optimizer":{"enabled":true,"runs":20},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"contracts/extension/interface/IClaimableERC721.sol":"IClaimableERC721"},"libraries":{}},"sources":{"contracts/extension/interface/IClaimableERC721.sol":{"keccak256":"0x867213bc7e2ad03ab3a1bc6f7bb4928ef9dbf2f80007f2db330703c62c24e960","urls":["bzz-raw://3df6a8ffcfb67316f7c5f142542098c4ab6276902cda76e3ed3e7080b96dd929","dweb:/ipfs/QmaT2N7Y4sg2h9Weyp3ASnbAdiFEoqSRhdAciweEoGxj9Y"],"license":"Apache-2.0"}},"version":1},"ast":{"absolutePath":"contracts/extension/interface/IClaimableERC721.sol","id":32895,"exportedSymbols":{"IClaimableERC721":[32894]},"nodeType":"SourceUnit","src":"39:1406:107","nodes":[{"id":32865,"nodeType":"PragmaDirective","src":"39:23:107","nodes":[],"literals":["solidity","^","0.8",".0"]},{"id":32894,"nodeType":"ContractDefinition","src":"86:1358:107","nodes":[{"id":32877,"nodeType":"EventDefinition","src":"164:164:107","nodes":[],"anonymous":false,"documentation":{"id":32867,"nodeType":"StructuredDocumentation","src":"119:40:107","text":"@dev Emitted when tokens are claimed"},"eventSelector":"ff097c7d8b1957a4ff09ef1361b5fb54dcede3941ba836d0beb9d10bec725de6","name":"TokensClaimed","nameLocation":"170:13:107","parameters":{"id":32876,"nodeType":"ParameterList","parameters":[{"constant":false,"id":32869,"indexed":true,"mutability":"mutable","name":"claimer","nameLocation":"209:7:107","nodeType":"VariableDeclaration","scope":32877,"src":"193:23:107","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":32868,"name":"address","nodeType":"ElementaryTypeName","src":"193:7:107","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":32871,"indexed":true,"mutability":"mutable","name":"receiver","nameLocation":"242:8:107","nodeType":"VariableDeclaration","scope":32877,"src":"226:24:107","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":32870,"name":"address","nodeType":"ElementaryTypeName","src":"226:7:107","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":32873,"indexed":true,"mutability":"mutable","name":"startTokenId","nameLocation":"276:12:107","nodeType":"VariableDeclaration","scope":32877,"src":"260:28:107","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":32872,"name":"uint256","nodeType":"ElementaryTypeName","src":"260:7:107","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":32875,"indexed":false,"mutability":"mutable","name":"quantityClaimed","nameLocation":"306:15:107","nodeType":"VariableDeclaration","scope":32877,"src":"298:23:107","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":32874,"name":"uint256","nodeType":"ElementaryTypeName","src":"298:7:107","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"183:144:107"}},{"id":32885,"nodeType":"FunctionDefinition","src":"890:70:107","nodes":[],"documentation":{"id":32878,"nodeType":"StructuredDocumentation","src":"334:551:107","text":"  @notice          Lets an address claim multiple lazy minted NFTs at once to a recipient.\n                   Contract creators should override this function to create custom logic for claiming,\n                   for e.g. price collection, allowlist, max quantity, etc.\n  @dev             The logic in the `verifyClaim` function determines whether the caller is authorized to mint NFTs.\n  @param _receiver  The recipient of the NFT to mint.\n  @param _quantity  The number of NFTs to mint."},"functionSelector":"aad3ec96","implemented":false,"kind":"function","modifiers":[],"name":"claim","nameLocation":"899:5:107","parameters":{"id":32883,"nodeType":"ParameterList","parameters":[{"constant":false,"id":32880,"mutability":"mutable","name":"_receiver","nameLocation":"913:9:107","nodeType":"VariableDeclaration","scope":32885,"src":"905:17:107","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":32879,"name":"address","nodeType":"ElementaryTypeName","src":"905:7:107","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":32882,"mutability":"mutable","name":"_quantity","nameLocation":"932:9:107","nodeType":"VariableDeclaration","scope":32885,"src":"924:17:107","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":32881,"name":"uint256","nodeType":"ElementaryTypeName","src":"924:7:107","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"904:38:107"},"returnParameters":{"id":32884,"nodeType":"ParameterList","parameters":[],"src":"959:0:107"},"scope":32894,"stateMutability":"payable","virtual":false,"visibility":"external"},{"id":32893,"nodeType":"FunctionDefinition","src":"1370:72:107","nodes":[],"documentation":{"id":32886,"nodeType":"StructuredDocumentation","src":"966:399:107","text":"  @notice          Override this function to add logic for claim verification, based on conditions\n                   such as allowlist, price, max quantity etc.\n  @dev             Checks a request to claim NFTs against a custom condition.\n  @param _claimer   Caller of the claim function.\n  @param _quantity  The number of NFTs being claimed."},"functionSelector":"2f92023a","implemented":false,"kind":"function","modifiers":[],"name":"verifyClaim","nameLocation":"1379:11:107","parameters":{"id":32891,"nodeType":"ParameterList","parameters":[{"constant":false,"id":32888,"mutability":"mutable","name":"_claimer","nameLocation":"1399:8:107","nodeType":"VariableDeclaration","scope":32893,"src":"1391:16:107","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":32887,"name":"address","nodeType":"ElementaryTypeName","src":"1391:7:107","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":32890,"mutability":"mutable","name":"_quantity","nameLocation":"1417:9:107","nodeType":"VariableDeclaration","scope":32893,"src":"1409:17:107","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":32889,"name":"uint256","nodeType":"ElementaryTypeName","src":"1409:7:107","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1390:37:107"},"returnParameters":{"id":32892,"nodeType":"ParameterList","parameters":[],"src":"1441:0:107"},"scope":32894,"stateMutability":"view","virtual":false,"visibility":"external"}],"abstract":false,"baseContracts":[],"canonicalName":"IClaimableERC721","contractDependencies":[],"contractKind":"interface","documentation":{"id":32866,"nodeType":"StructuredDocumentation","src":"64:21:107","text":"@author thirdweb"},"fullyImplemented":false,"linearizedBaseContracts":[32894],"name":"IClaimableERC721","nameLocation":"96:16:107","scope":32895,"usedErrors":[],"usedEvents":[32877]}],"license":"Apache-2.0"},"id":107}