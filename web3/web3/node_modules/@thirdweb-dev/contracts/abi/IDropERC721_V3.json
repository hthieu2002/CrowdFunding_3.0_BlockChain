{"abi":[{"type":"function","name":"approve","inputs":[{"name":"to","type":"address","internalType":"address"},{"name":"tokenId","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"balanceOf","inputs":[{"name":"owner","type":"address","internalType":"address"}],"outputs":[{"name":"balance","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"claim","inputs":[{"name":"receiver","type":"address","internalType":"address"},{"name":"quantity","type":"uint256","internalType":"uint256"},{"name":"currency","type":"address","internalType":"address"},{"name":"pricePerToken","type":"uint256","internalType":"uint256"},{"name":"proofs","type":"bytes32[]","internalType":"bytes32[]"},{"name":"proofMaxQuantityPerTransaction","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"payable"},{"type":"function","name":"getApproved","inputs":[{"name":"tokenId","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"operator","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"isApprovedForAll","inputs":[{"name":"owner","type":"address","internalType":"address"},{"name":"operator","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"lazyMint","inputs":[{"name":"amount","type":"uint256","internalType":"uint256"},{"name":"baseURIForTokens","type":"string","internalType":"string"},{"name":"encryptedBaseURI","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"ownerOf","inputs":[{"name":"tokenId","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"owner","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"safeTransferFrom","inputs":[{"name":"from","type":"address","internalType":"address"},{"name":"to","type":"address","internalType":"address"},{"name":"tokenId","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"safeTransferFrom","inputs":[{"name":"from","type":"address","internalType":"address"},{"name":"to","type":"address","internalType":"address"},{"name":"tokenId","type":"uint256","internalType":"uint256"},{"name":"data","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setApprovalForAll","inputs":[{"name":"operator","type":"address","internalType":"address"},{"name":"approved","type":"bool","internalType":"bool"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setClaimConditions","inputs":[{"name":"phases","type":"tuple[]","internalType":"struct IDropClaimCondition_V2.ClaimCondition[]","components":[{"name":"startTimestamp","type":"uint256","internalType":"uint256"},{"name":"maxClaimableSupply","type":"uint256","internalType":"uint256"},{"name":"supplyClaimed","type":"uint256","internalType":"uint256"},{"name":"quantityLimitPerTransaction","type":"uint256","internalType":"uint256"},{"name":"waitTimeInSecondsBetweenClaims","type":"uint256","internalType":"uint256"},{"name":"merkleRoot","type":"bytes32","internalType":"bytes32"},{"name":"pricePerToken","type":"uint256","internalType":"uint256"},{"name":"currency","type":"address","internalType":"address"}]},{"name":"resetClaimEligibility","type":"bool","internalType":"bool"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"supportsInterface","inputs":[{"name":"interfaceId","type":"bytes4","internalType":"bytes4"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"transferFrom","inputs":[{"name":"from","type":"address","internalType":"address"},{"name":"to","type":"address","internalType":"address"},{"name":"tokenId","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"event","name":"Approval","inputs":[{"name":"owner","type":"address","indexed":true,"internalType":"address"},{"name":"approved","type":"address","indexed":true,"internalType":"address"},{"name":"tokenId","type":"uint256","indexed":true,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"ApprovalForAll","inputs":[{"name":"owner","type":"address","indexed":true,"internalType":"address"},{"name":"operator","type":"address","indexed":true,"internalType":"address"},{"name":"approved","type":"bool","indexed":false,"internalType":"bool"}],"anonymous":false},{"type":"event","name":"ClaimConditionsUpdated","inputs":[{"name":"claimConditions","type":"tuple[]","indexed":false,"internalType":"struct IDropClaimCondition_V2.ClaimCondition[]","components":[{"name":"startTimestamp","type":"uint256","internalType":"uint256"},{"name":"maxClaimableSupply","type":"uint256","internalType":"uint256"},{"name":"supplyClaimed","type":"uint256","internalType":"uint256"},{"name":"quantityLimitPerTransaction","type":"uint256","internalType":"uint256"},{"name":"waitTimeInSecondsBetweenClaims","type":"uint256","internalType":"uint256"},{"name":"merkleRoot","type":"bytes32","internalType":"bytes32"},{"name":"pricePerToken","type":"uint256","internalType":"uint256"},{"name":"currency","type":"address","internalType":"address"}]}],"anonymous":false},{"type":"event","name":"MaxTotalSupplyUpdated","inputs":[{"name":"maxTotalSupply","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"MaxWalletClaimCountUpdated","inputs":[{"name":"count","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"NFTRevealed","inputs":[{"name":"endTokenId","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"revealedURI","type":"string","indexed":false,"internalType":"string"}],"anonymous":false},{"type":"event","name":"TokensClaimed","inputs":[{"name":"claimConditionIndex","type":"uint256","indexed":true,"internalType":"uint256"},{"name":"claimer","type":"address","indexed":true,"internalType":"address"},{"name":"receiver","type":"address","indexed":true,"internalType":"address"},{"name":"startTokenId","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"quantityClaimed","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"TokensLazyMinted","inputs":[{"name":"startTokenId","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"endTokenId","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"baseURI","type":"string","indexed":false,"internalType":"string"},{"name":"encryptedBaseURI","type":"bytes","indexed":false,"internalType":"bytes"}],"anonymous":false},{"type":"event","name":"Transfer","inputs":[{"name":"from","type":"address","indexed":true,"internalType":"address"},{"name":"to","type":"address","indexed":true,"internalType":"address"},{"name":"tokenId","type":"uint256","indexed":true,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"WalletClaimCountUpdated","inputs":[{"name":"wallet","type":"address","indexed":true,"internalType":"address"},{"name":"count","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","claim(address,uint256,address,uint256,bytes32[],uint256)":"7a5a8e7e","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","lazyMint(uint256,string,bytes)":"d37c353b","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","setClaimConditions((uint256,uint256,uint256,uint256,uint256,bytes32,uint256,address)[],bool)":"e23b8164","supportsInterface(bytes4)":"01ffc9a7","transferFrom(address,address,uint256)":"23b872dd"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxClaimableSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantityLimitPerTransaction\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"waitTimeInSecondsBetweenClaims\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"pricePerToken\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct IDropClaimCondition_V2.ClaimCondition[]\",\"name\":\"claimConditions\",\"type\":\"tuple[]\"}],\"name\":\"ClaimConditionsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxTotalSupply\",\"type\":\"uint256\"}],\"name\":\"MaxTotalSupplyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"MaxWalletClaimCountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"revealedURI\",\"type\":\"string\"}],\"name\":\"NFTRevealed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"claimConditionIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantityClaimed\",\"type\":\"uint256\"}],\"name\":\"TokensClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"encryptedBaseURI\",\"type\":\"bytes\"}],\"name\":\"TokensLazyMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"WalletClaimCountUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pricePerToken\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proofs\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"proofMaxQuantityPerTransaction\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"baseURIForTokens\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"encryptedBaseURI\",\"type\":\"bytes\"}],\"name\":\"lazyMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxClaimableSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantityLimitPerTransaction\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"waitTimeInSecondsBetweenClaims\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"pricePerToken\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"}],\"internalType\":\"struct IDropClaimCondition_V2.ClaimCondition[]\",\"name\":\"phases\",\"type\":\"tuple[]\"},{\"internalType\":\"bool\",\"name\":\"resetClaimEligibility\",\"type\":\"bool\"}],\"name\":\"setClaimConditions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"ClaimConditionsUpdated((uint256,uint256,uint256,uint256,uint256,bytes32,uint256,address)[])\":{\"details\":\"Emitted when new claim conditions are set.\"},\"MaxTotalSupplyUpdated(uint256)\":{\"details\":\"Emitted when the global max supply of tokens is updated.\"},\"MaxWalletClaimCountUpdated(uint256)\":{\"details\":\"Emitted when the global max wallet claim count is updated.\"},\"NFTRevealed(uint256,string)\":{\"details\":\"Emitted when the URI for a batch of 'delayed-reveal' NFTs is revealed.\"},\"TokensClaimed(uint256,address,address,uint256,uint256)\":{\"details\":\"Emitted when tokens are claimed.\"},\"TokensLazyMinted(uint256,uint256,string,bytes)\":{\"details\":\"Emitted when tokens are lazy minted.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"},\"WalletClaimCountUpdated(address,uint256)\":{\"details\":\"Emitted when the wallet claim count for an address is updated.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"claim(address,uint256,address,uint256,bytes32[],uint256)\":{\"params\":{\"currency\":\"The currency in which to pay for the claim.\",\"pricePerToken\":\"The price per token to pay for the claim.\",\"proofMaxQuantityPerTransaction\":\"(Optional) The maximum number of NFTs an address included in an                                        allowlist can claim.\",\"proofs\":\"The proof of the claimer's inclusion in the merkle root allowlist                                        of the claim conditions that apply.\",\"quantity\":\"The quantity of NFTs to claim.\",\"receiver\":\"The receiver of the NFTs to claim.\"}},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"lazyMint(uint256,string,bytes)\":{\"params\":{\"amount\":\"The amount of NFTs to lazy mint.\",\"baseURIForTokens\":\"The URI for the NFTs to lazy mint. If lazy minting                           'delayed-reveal' NFTs, the is a URI for NFTs in the                           un-revealed state.\",\"encryptedBaseURI\":\"If lazy minting 'delayed-reveal' NFTs, this is the                           result of encrypting the URI of the NFTs in the revealed                           state.\"}},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"setClaimConditions((uint256,uint256,uint256,uint256,uint256,bytes32,uint256,address)[],bool)\":{\"params\":{\"phases\":\"Claim conditions in ascending order by `startTimestamp`.\",\"resetClaimEligibility\":\"Whether to reset `limitLastClaimTimestamp` and                               `limitMerkleProofClaim` values when setting new                               claim conditions.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claim(address,uint256,address,uint256,bytes32[],uint256)\":{\"notice\":\"Lets an account claim a given quantity of NFTs.\"},\"lazyMint(uint256,string,bytes)\":{\"notice\":\"Lets an account with `MINTER_ROLE` lazy mint 'n' NFTs.          The URIs for each token is the provided `_baseURIForTokens` + `{tokenId}`.\"},\"setClaimConditions((uint256,uint256,uint256,uint256,uint256,bytes32,uint256,address)[],bool)\":{\"notice\":\"Lets a contract admin (account with `DEFAULT_ADMIN_ROLE`) set claim conditions.\"}},\"notice\":\"Thirdweb's 'Drop' contracts are distribution mechanisms for tokens. The  `DropERC721` contract is a distribution mechanism for ERC721 tokens.  A minter wallet (i.e. holder of `MINTER_ROLE`) can (lazy)mint 'n' tokens  at once by providing a single base URI for all tokens being lazy minted.  The URI for each of the 'n' tokens lazy minted is the provided base URI +  `{tokenId}` of the respective token. (e.g. \\\"ipsf://Qmece.../1\\\").  A minter can choose to lazy mint 'delayed-reveal' tokens. More on 'delayed-reveal'  tokens in [this article](https://blog.thirdweb.com/delayed-reveal-nfts).  A contract admin (i.e. holder of `DEFAULT_ADMIN_ROLE`) can create claim conditions  with non-overlapping time windows, and accounts can claim the tokens according to  restrictions defined in the claim condition that is active at the time of the transaction.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/legacy-contracts/interface/drop/IDropERC721_V3.sol\":\"IDropERC721_V3\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[\":@chainlink/=lib/chainlink/\",\":@ds-test/=lib/ds-test/src/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@std/=lib/forge-std/src/\",\":@thirdweb-dev/dynamic-contracts/=lib/dynamic-contracts/\",\":ERC721A-Upgradeable/=lib/ERC721A-Upgradeable/contracts/\",\":ERC721A/=lib/ERC721A/contracts/\",\":chainlink/=lib/chainlink/contracts/\",\":contracts/=contracts/\",\":ds-test/=lib/ds-test/src/\",\":dynamic-contracts/=lib/dynamic-contracts/src/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":erc721a-upgradeable/=lib/ERC721A-Upgradeable/\",\":erc721a/=lib/ERC721A/\",\":forge-std/=lib/forge-std/src/\",\":lib/sstore2/=lib/dynamic-contracts/lib/sstore2/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sstore2/=lib/dynamic-contracts/lib/sstore2/contracts/\"]},\"sources\":{\"contracts/legacy-contracts/interface/drop/IDropClaimCondition_V2.sol\":{\"keccak256\":\"0x4977fa771ecd5780111cfe22de9864e93e8a123713dd2683e00fa33db162f85a\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://45813cd954a401458dadaca7ea86a808fb2641b37c02d161977c65af1f3116a3\",\"dweb:/ipfs/QmfZBbdViSEE55zLY4NkMJHeMjwMje7bsiRPDvym7GcTLr\"]},\"contracts/legacy-contracts/interface/drop/IDropERC721_V3.sol\":{\"keccak256\":\"0x594896dc66c1276147ed0272f98aebb71b6d8a018ddde8d747378d21935a26a3\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://fc010ea45d3db42d1d01bf02c5d02e61d76be7351062da85d8571c117e4767a4\",\"dweb:/ipfs/QmZKADgMSWcDAYPtDsSKUFNnSNRTWDuD4pK2fHBw94vBHE\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC721/IERC721Upgradeable.sol\":{\"keccak256\":\"0xbe63437e37e32162d5d11ea8f11a44378c092b4bcbb05b51a813fe4bf33297d4\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://68a514febde6ffd8afe3cb5b40815d10c0a926063237d5d167cbaa90239f75ae\",\"dweb:/ipfs/QmVBvYeR6oGBw7K7vu5FMotr8josejtaGwugM68VTZacww\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/IERC165Upgradeable.sol\":{\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://92ad7e572cf44e6b4b37631b44b62f9eb9fb1cf14d9ce51c1504d5dc7ccaf758\",\"dweb:/ipfs/QmcnbqX85tsWnUXPmtuPLE4SczME2sJaTfmqEFkuAJvWhy\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/structs/BitMapsUpgradeable.sol\":{\"keccak256\":\"0x07aab61872a5dd56d876a8d8f82f4cc063e74d16ec9f1eff100fcaee423b5de9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://399cf9ed2bce652a340c0336a2a426c88ad593aa989b4bb239d0ba44385d66a4\",\"dweb:/ipfs/QmVCKpLx1qJ16iMvjA2ZLT2b9iGRq3ybVQN3RxoUgwMwxn\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.23+commit.f704f362"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"owner","type":"address","indexed":true},{"internalType":"address","name":"approved","type":"address","indexed":true},{"internalType":"uint256","name":"tokenId","type":"uint256","indexed":true}],"type":"event","name":"Approval","anonymous":false},{"inputs":[{"internalType":"address","name":"owner","type":"address","indexed":true},{"internalType":"address","name":"operator","type":"address","indexed":true},{"internalType":"bool","name":"approved","type":"bool","indexed":false}],"type":"event","name":"ApprovalForAll","anonymous":false},{"inputs":[{"internalType":"struct IDropClaimCondition_V2.ClaimCondition[]","name":"claimConditions","type":"tuple[]","components":[{"internalType":"uint256","name":"startTimestamp","type":"uint256"},{"internalType":"uint256","name":"maxClaimableSupply","type":"uint256"},{"internalType":"uint256","name":"supplyClaimed","type":"uint256"},{"internalType":"uint256","name":"quantityLimitPerTransaction","type":"uint256"},{"internalType":"uint256","name":"waitTimeInSecondsBetweenClaims","type":"uint256"},{"internalType":"bytes32","name":"merkleRoot","type":"bytes32"},{"internalType":"uint256","name":"pricePerToken","type":"uint256"},{"internalType":"address","name":"currency","type":"address"}],"indexed":false}],"type":"event","name":"ClaimConditionsUpdated","anonymous":false},{"inputs":[{"internalType":"uint256","name":"maxTotalSupply","type":"uint256","indexed":false}],"type":"event","name":"MaxTotalSupplyUpdated","anonymous":false},{"inputs":[{"internalType":"uint256","name":"count","type":"uint256","indexed":false}],"type":"event","name":"MaxWalletClaimCountUpdated","anonymous":false},{"inputs":[{"internalType":"uint256","name":"endTokenId","type":"uint256","indexed":false},{"internalType":"string","name":"revealedURI","type":"string","indexed":false}],"type":"event","name":"NFTRevealed","anonymous":false},{"inputs":[{"internalType":"uint256","name":"claimConditionIndex","type":"uint256","indexed":true},{"internalType":"address","name":"claimer","type":"address","indexed":true},{"internalType":"address","name":"receiver","type":"address","indexed":true},{"internalType":"uint256","name":"startTokenId","type":"uint256","indexed":false},{"internalType":"uint256","name":"quantityClaimed","type":"uint256","indexed":false}],"type":"event","name":"TokensClaimed","anonymous":false},{"inputs":[{"internalType":"uint256","name":"startTokenId","type":"uint256","indexed":false},{"internalType":"uint256","name":"endTokenId","type":"uint256","indexed":false},{"internalType":"string","name":"baseURI","type":"string","indexed":false},{"internalType":"bytes","name":"encryptedBaseURI","type":"bytes","indexed":false}],"type":"event","name":"TokensLazyMinted","anonymous":false},{"inputs":[{"internalType":"address","name":"from","type":"address","indexed":true},{"internalType":"address","name":"to","type":"address","indexed":true},{"internalType":"uint256","name":"tokenId","type":"uint256","indexed":true}],"type":"event","name":"Transfer","anonymous":false},{"inputs":[{"internalType":"address","name":"wallet","type":"address","indexed":true},{"internalType":"uint256","name":"count","type":"uint256","indexed":false}],"type":"event","name":"WalletClaimCountUpdated","anonymous":false},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"approve"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"stateMutability":"view","type":"function","name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"receiver","type":"address"},{"internalType":"uint256","name":"quantity","type":"uint256"},{"internalType":"address","name":"currency","type":"address"},{"internalType":"uint256","name":"pricePerToken","type":"uint256"},{"internalType":"bytes32[]","name":"proofs","type":"bytes32[]"},{"internalType":"uint256","name":"proofMaxQuantityPerTransaction","type":"uint256"}],"stateMutability":"payable","type":"function","name":"claim"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"stateMutability":"view","type":"function","name":"getApproved","outputs":[{"internalType":"address","name":"operator","type":"address"}]},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"stateMutability":"view","type":"function","name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"string","name":"baseURIForTokens","type":"string"},{"internalType":"bytes","name":"encryptedBaseURI","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"lazyMint"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"stateMutability":"view","type":"function","name":"ownerOf","outputs":[{"internalType":"address","name":"owner","type":"address"}]},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"safeTransferFrom"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"safeTransferFrom"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"stateMutability":"nonpayable","type":"function","name":"setApprovalForAll"},{"inputs":[{"internalType":"struct IDropClaimCondition_V2.ClaimCondition[]","name":"phases","type":"tuple[]","components":[{"internalType":"uint256","name":"startTimestamp","type":"uint256"},{"internalType":"uint256","name":"maxClaimableSupply","type":"uint256"},{"internalType":"uint256","name":"supplyClaimed","type":"uint256"},{"internalType":"uint256","name":"quantityLimitPerTransaction","type":"uint256"},{"internalType":"uint256","name":"waitTimeInSecondsBetweenClaims","type":"uint256"},{"internalType":"bytes32","name":"merkleRoot","type":"bytes32"},{"internalType":"uint256","name":"pricePerToken","type":"uint256"},{"internalType":"address","name":"currency","type":"address"}]},{"internalType":"bool","name":"resetClaimEligibility","type":"bool"}],"stateMutability":"nonpayable","type":"function","name":"setClaimConditions"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"stateMutability":"view","type":"function","name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"transferFrom"}],"devdoc":{"kind":"dev","methods":{"approve(address,uint256)":{"details":"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the number of tokens in ``owner``'s account."},"claim(address,uint256,address,uint256,bytes32[],uint256)":{"params":{"currency":"The currency in which to pay for the claim.","pricePerToken":"The price per token to pay for the claim.","proofMaxQuantityPerTransaction":"(Optional) The maximum number of NFTs an address included in an                                        allowlist can claim.","proofs":"The proof of the claimer's inclusion in the merkle root allowlist                                        of the claim conditions that apply.","quantity":"The quantity of NFTs to claim.","receiver":"The receiver of the NFTs to claim."}},"getApproved(uint256)":{"details":"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."},"isApprovedForAll(address,address)":{"details":"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"},"lazyMint(uint256,string,bytes)":{"params":{"amount":"The amount of NFTs to lazy mint.","baseURIForTokens":"The URI for the NFTs to lazy mint. If lazy minting                           'delayed-reveal' NFTs, the is a URI for NFTs in the                           un-revealed state.","encryptedBaseURI":"If lazy minting 'delayed-reveal' NFTs, this is the                           result of encrypting the URI of the NFTs in the revealed                           state."}},"ownerOf(uint256)":{"details":"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."},"safeTransferFrom(address,address,uint256)":{"details":"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"setApprovalForAll(address,bool)":{"details":"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."},"setClaimConditions((uint256,uint256,uint256,uint256,uint256,bytes32,uint256,address)[],bool)":{"params":{"phases":"Claim conditions in ascending order by `startTimestamp`.","resetClaimEligibility":"Whether to reset `limitLastClaimTimestamp` and                               `limitMerkleProofClaim` values when setting new                               claim conditions."}},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"transferFrom(address,address,uint256)":{"details":"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."}},"version":1},"userdoc":{"kind":"user","methods":{"claim(address,uint256,address,uint256,bytes32[],uint256)":{"notice":"Lets an account claim a given quantity of NFTs."},"lazyMint(uint256,string,bytes)":{"notice":"Lets an account with `MINTER_ROLE` lazy mint 'n' NFTs.          The URIs for each token is the provided `_baseURIForTokens` + `{tokenId}`."},"setClaimConditions((uint256,uint256,uint256,uint256,uint256,bytes32,uint256,address)[],bool)":{"notice":"Lets a contract admin (account with `DEFAULT_ADMIN_ROLE`) set claim conditions."}},"version":1}},"settings":{"remappings":["@chainlink/=lib/chainlink/","@ds-test/=lib/ds-test/src/","@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/","@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","@std/=lib/forge-std/src/","@thirdweb-dev/dynamic-contracts/=lib/dynamic-contracts/","ERC721A-Upgradeable/=lib/ERC721A-Upgradeable/contracts/","ERC721A/=lib/ERC721A/contracts/","chainlink/=lib/chainlink/contracts/","contracts/=contracts/","ds-test/=lib/ds-test/src/","dynamic-contracts/=lib/dynamic-contracts/src/","erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/","erc721a-upgradeable/=lib/ERC721A-Upgradeable/","erc721a/=lib/ERC721A/","forge-std/=lib/forge-std/src/","lib/sstore2/=lib/dynamic-contracts/lib/sstore2/","openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/","openzeppelin-contracts/=lib/openzeppelin-contracts/","openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/","sstore2/=lib/dynamic-contracts/lib/sstore2/contracts/"],"optimizer":{"enabled":true,"runs":20},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"contracts/legacy-contracts/interface/drop/IDropERC721_V3.sol":"IDropERC721_V3"},"libraries":{}},"sources":{"contracts/legacy-contracts/interface/drop/IDropClaimCondition_V2.sol":{"keccak256":"0x4977fa771ecd5780111cfe22de9864e93e8a123713dd2683e00fa33db162f85a","urls":["bzz-raw://45813cd954a401458dadaca7ea86a808fb2641b37c02d161977c65af1f3116a3","dweb:/ipfs/QmfZBbdViSEE55zLY4NkMJHeMjwMje7bsiRPDvym7GcTLr"],"license":"Apache-2.0"},"contracts/legacy-contracts/interface/drop/IDropERC721_V3.sol":{"keccak256":"0x594896dc66c1276147ed0272f98aebb71b6d8a018ddde8d747378d21935a26a3","urls":["bzz-raw://fc010ea45d3db42d1d01bf02c5d02e61d76be7351062da85d8571c117e4767a4","dweb:/ipfs/QmZKADgMSWcDAYPtDsSKUFNnSNRTWDuD4pK2fHBw94vBHE"],"license":"Apache-2.0"},"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC721/IERC721Upgradeable.sol":{"keccak256":"0xbe63437e37e32162d5d11ea8f11a44378c092b4bcbb05b51a813fe4bf33297d4","urls":["bzz-raw://68a514febde6ffd8afe3cb5b40815d10c0a926063237d5d167cbaa90239f75ae","dweb:/ipfs/QmVBvYeR6oGBw7K7vu5FMotr8josejtaGwugM68VTZacww"],"license":"MIT"},"lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/IERC165Upgradeable.sol":{"keccak256":"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09","urls":["bzz-raw://92ad7e572cf44e6b4b37631b44b62f9eb9fb1cf14d9ce51c1504d5dc7ccaf758","dweb:/ipfs/QmcnbqX85tsWnUXPmtuPLE4SczME2sJaTfmqEFkuAJvWhy"],"license":"MIT"},"lib/openzeppelin-contracts-upgradeable/contracts/utils/structs/BitMapsUpgradeable.sol":{"keccak256":"0x07aab61872a5dd56d876a8d8f82f4cc063e74d16ec9f1eff100fcaee423b5de9","urls":["bzz-raw://399cf9ed2bce652a340c0336a2a426c88ad593aa989b4bb239d0ba44385d66a4","dweb:/ipfs/QmVCKpLx1qJ16iMvjA2ZLT2b9iGRq3ybVQN3RxoUgwMwxn"],"license":"MIT"}},"version":1},"ast":{"absolutePath":"contracts/legacy-contracts/interface/drop/IDropERC721_V3.sol","id":58374,"exportedSymbols":{"BitMapsUpgradeable":[165227],"IDropClaimCondition_V2":[58082],"IDropERC721_V3":[58373],"IERC165Upgradeable":[162577],"IERC721Upgradeable":[159173]},"nodeType":"SourceUnit","src":"39:4607:283","nodes":[{"id":58273,"nodeType":"PragmaDirective","src":"39:24:283","nodes":[],"literals":["solidity","^","0.8",".11"]},{"id":58274,"nodeType":"ImportDirective","src":"87:81:283","nodes":[],"absolutePath":"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC721/IERC721Upgradeable.sol","file":"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol","nameLocation":"-1:-1:-1","scope":58374,"sourceUnit":159174,"symbolAliases":[],"unitAlias":""},{"id":58275,"nodeType":"ImportDirective","src":"169:38:283","nodes":[],"absolutePath":"contracts/legacy-contracts/interface/drop/IDropClaimCondition_V2.sol","file":"./IDropClaimCondition_V2.sol","nameLocation":"-1:-1:-1","scope":58374,"sourceUnit":58083,"symbolAliases":[],"unitAlias":""},{"id":58373,"nodeType":"ContractDefinition","src":"1109:3536:283","nodes":[{"id":58293,"nodeType":"EventDefinition","src":"1232:201:283","nodes":[],"anonymous":false,"documentation":{"id":58281,"nodeType":"StructuredDocumentation","src":"1186:41:283","text":"@dev Emitted when tokens are claimed."},"eventSelector":"fa76a4010d9533e3e964f2930a65fb6042a12fa6ff5b08281837a10b0be7321e","name":"TokensClaimed","nameLocation":"1238:13:283","parameters":{"id":58292,"nodeType":"ParameterList","parameters":[{"constant":false,"id":58283,"indexed":true,"mutability":"mutable","name":"claimConditionIndex","nameLocation":"1277:19:283","nodeType":"VariableDeclaration","scope":58293,"src":"1261:35:283","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":58282,"name":"uint256","nodeType":"ElementaryTypeName","src":"1261:7:283","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":58285,"indexed":true,"mutability":"mutable","name":"claimer","nameLocation":"1322:7:283","nodeType":"VariableDeclaration","scope":58293,"src":"1306:23:283","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":58284,"name":"address","nodeType":"ElementaryTypeName","src":"1306:7:283","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":58287,"indexed":true,"mutability":"mutable","name":"receiver","nameLocation":"1355:8:283","nodeType":"VariableDeclaration","scope":58293,"src":"1339:24:283","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":58286,"name":"address","nodeType":"ElementaryTypeName","src":"1339:7:283","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":58289,"indexed":false,"mutability":"mutable","name":"startTokenId","nameLocation":"1381:12:283","nodeType":"VariableDeclaration","scope":58293,"src":"1373:20:283","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":58288,"name":"uint256","nodeType":"ElementaryTypeName","src":"1373:7:283","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":58291,"indexed":false,"mutability":"mutable","name":"quantityClaimed","nameLocation":"1411:15:283","nodeType":"VariableDeclaration","scope":58293,"src":"1403:23:283","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":58290,"name":"uint256","nodeType":"ElementaryTypeName","src":"1403:7:283","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1251:181:283"}},{"id":58304,"nodeType":"EventDefinition","src":"1489:105:283","nodes":[],"anonymous":false,"documentation":{"id":58294,"nodeType":"StructuredDocumentation","src":"1439:45:283","text":"@dev Emitted when tokens are lazy minted."},"eventSelector":"2a0365091ef1a40953c670dce28177e37520648a6fdc91506bffac0ab045570d","name":"TokensLazyMinted","nameLocation":"1495:16:283","parameters":{"id":58303,"nodeType":"ParameterList","parameters":[{"constant":false,"id":58296,"indexed":false,"mutability":"mutable","name":"startTokenId","nameLocation":"1520:12:283","nodeType":"VariableDeclaration","scope":58304,"src":"1512:20:283","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":58295,"name":"uint256","nodeType":"ElementaryTypeName","src":"1512:7:283","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":58298,"indexed":false,"mutability":"mutable","name":"endTokenId","nameLocation":"1542:10:283","nodeType":"VariableDeclaration","scope":58304,"src":"1534:18:283","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":58297,"name":"uint256","nodeType":"ElementaryTypeName","src":"1534:7:283","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":58300,"indexed":false,"mutability":"mutable","name":"baseURI","nameLocation":"1561:7:283","nodeType":"VariableDeclaration","scope":58304,"src":"1554:14:283","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":58299,"name":"string","nodeType":"ElementaryTypeName","src":"1554:6:283","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":58302,"indexed":false,"mutability":"mutable","name":"encryptedBaseURI","nameLocation":"1576:16:283","nodeType":"VariableDeclaration","scope":58304,"src":"1570:22:283","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":58301,"name":"bytes","nodeType":"ElementaryTypeName","src":"1570:5:283","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1511:82:283"}},{"id":58311,"nodeType":"EventDefinition","src":"1684:58:283","nodes":[],"anonymous":false,"documentation":{"id":58305,"nodeType":"StructuredDocumentation","src":"1600:79:283","text":"@dev Emitted when the URI for a batch of 'delayed-reveal' NFTs is revealed."},"eventSelector":"09b52c0c3a3e08761cd3917c8e49275ed1e0982477b54047add8b4d70513bc86","name":"NFTRevealed","nameLocation":"1690:11:283","parameters":{"id":58310,"nodeType":"ParameterList","parameters":[{"constant":false,"id":58307,"indexed":false,"mutability":"mutable","name":"endTokenId","nameLocation":"1710:10:283","nodeType":"VariableDeclaration","scope":58311,"src":"1702:18:283","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":58306,"name":"uint256","nodeType":"ElementaryTypeName","src":"1702:7:283","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":58309,"indexed":false,"mutability":"mutable","name":"revealedURI","nameLocation":"1729:11:283","nodeType":"VariableDeclaration","scope":58311,"src":"1722:18:283","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":58308,"name":"string","nodeType":"ElementaryTypeName","src":"1722:6:283","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1701:40:283"}},{"id":58318,"nodeType":"EventDefinition","src":"1804:63:283","nodes":[],"anonymous":false,"documentation":{"id":58312,"nodeType":"StructuredDocumentation","src":"1748:51:283","text":"@dev Emitted when new claim conditions are set."},"eventSelector":"22ddd1bcb3816651679299dbffccb94973edec10c32e88dc2f4735c7699a02ca","name":"ClaimConditionsUpdated","nameLocation":"1810:22:283","parameters":{"id":58317,"nodeType":"ParameterList","parameters":[{"constant":false,"id":58316,"indexed":false,"mutability":"mutable","name":"claimConditions","nameLocation":"1850:15:283","nodeType":"VariableDeclaration","scope":58318,"src":"1833:32:283","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_ClaimCondition_$58059_memory_ptr_$dyn_memory_ptr","typeString":"struct IDropClaimCondition_V2.ClaimCondition[]"},"typeName":{"baseType":{"id":58314,"nodeType":"UserDefinedTypeName","pathNode":{"id":58313,"name":"ClaimCondition","nameLocations":["1833:14:283"],"nodeType":"IdentifierPath","referencedDeclaration":58059,"src":"1833:14:283"},"referencedDeclaration":58059,"src":"1833:14:283","typeDescriptions":{"typeIdentifier":"t_struct$_ClaimCondition_$58059_storage_ptr","typeString":"struct IDropClaimCondition_V2.ClaimCondition"}},"id":58315,"nodeType":"ArrayTypeName","src":"1833:16:283","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_ClaimCondition_$58059_storage_$dyn_storage_ptr","typeString":"struct IDropClaimCondition_V2.ClaimCondition[]"}},"visibility":"internal"}],"src":"1832:34:283"}},{"id":58323,"nodeType":"EventDefinition","src":"1943:52:283","nodes":[],"anonymous":false,"documentation":{"id":58319,"nodeType":"StructuredDocumentation","src":"1873:65:283","text":"@dev Emitted when the global max supply of tokens is updated."},"eventSelector":"f2672935fc79f5237559e2e2999dbe743bf65430894ac2b37666890e7c69e1af","name":"MaxTotalSupplyUpdated","nameLocation":"1949:21:283","parameters":{"id":58322,"nodeType":"ParameterList","parameters":[{"constant":false,"id":58321,"indexed":false,"mutability":"mutable","name":"maxTotalSupply","nameLocation":"1979:14:283","nodeType":"VariableDeclaration","scope":58323,"src":"1971:22:283","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":58320,"name":"uint256","nodeType":"ElementaryTypeName","src":"1971:7:283","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1970:24:283"}},{"id":58330,"nodeType":"EventDefinition","src":"2077:69:283","nodes":[],"anonymous":false,"documentation":{"id":58324,"nodeType":"StructuredDocumentation","src":"2001:71:283","text":"@dev Emitted when the wallet claim count for an address is updated."},"eventSelector":"8973b95d42472e89416ea69404f8038c041db700af9ec294e7b4cd4e1ff2801c","name":"WalletClaimCountUpdated","nameLocation":"2083:23:283","parameters":{"id":58329,"nodeType":"ParameterList","parameters":[{"constant":false,"id":58326,"indexed":true,"mutability":"mutable","name":"wallet","nameLocation":"2123:6:283","nodeType":"VariableDeclaration","scope":58330,"src":"2107:22:283","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":58325,"name":"address","nodeType":"ElementaryTypeName","src":"2107:7:283","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":58328,"indexed":false,"mutability":"mutable","name":"count","nameLocation":"2139:5:283","nodeType":"VariableDeclaration","scope":58330,"src":"2131:13:283","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":58327,"name":"uint256","nodeType":"ElementaryTypeName","src":"2131:7:283","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2106:39:283"}},{"id":58335,"nodeType":"EventDefinition","src":"2224:48:283","nodes":[],"anonymous":false,"documentation":{"id":58331,"nodeType":"StructuredDocumentation","src":"2152:67:283","text":"@dev Emitted when the global max wallet claim count is updated."},"eventSelector":"f9d383c69b6255cbd431ca23734f43bdf15e694c7494956c917498469bcbce73","name":"MaxWalletClaimCountUpdated","nameLocation":"2230:26:283","parameters":{"id":58334,"nodeType":"ParameterList","parameters":[{"constant":false,"id":58333,"indexed":false,"mutability":"mutable","name":"count","nameLocation":"2265:5:283","nodeType":"VariableDeclaration","scope":58335,"src":"2257:13:283","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":58332,"name":"uint256","nodeType":"ElementaryTypeName","src":"2257:7:283","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2256:15:283"}},{"id":58345,"nodeType":"FunctionDefinition","src":"2961:110:283","nodes":[],"documentation":{"id":58336,"nodeType":"StructuredDocumentation","src":"2278:678:283","text":"  @notice Lets an account with `MINTER_ROLE` lazy mint 'n' NFTs.\n          The URIs for each token is the provided `_baseURIForTokens` + `{tokenId}`.\n  @param amount           The amount of NFTs to lazy mint.\n  @param baseURIForTokens The URI for the NFTs to lazy mint. If lazy minting\n                           'delayed-reveal' NFTs, the is a URI for NFTs in the\n                           un-revealed state.\n  @param encryptedBaseURI If lazy minting 'delayed-reveal' NFTs, this is the\n                           result of encrypting the URI of the NFTs in the revealed\n                           state."},"functionSelector":"d37c353b","implemented":false,"kind":"function","modifiers":[],"name":"lazyMint","nameLocation":"2970:8:283","parameters":{"id":58343,"nodeType":"ParameterList","parameters":[{"constant":false,"id":58338,"mutability":"mutable","name":"amount","nameLocation":"2987:6:283","nodeType":"VariableDeclaration","scope":58345,"src":"2979:14:283","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":58337,"name":"uint256","nodeType":"ElementaryTypeName","src":"2979:7:283","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":58340,"mutability":"mutable","name":"baseURIForTokens","nameLocation":"3011:16:283","nodeType":"VariableDeclaration","scope":58345,"src":"2995:32:283","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":58339,"name":"string","nodeType":"ElementaryTypeName","src":"2995:6:283","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":58342,"mutability":"mutable","name":"encryptedBaseURI","nameLocation":"3044:16:283","nodeType":"VariableDeclaration","scope":58345,"src":"3029:31:283","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":58341,"name":"bytes","nodeType":"ElementaryTypeName","src":"3029:5:283","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2978:83:283"},"returnParameters":{"id":58344,"nodeType":"ParameterList","parameters":[],"src":"3070:0:283"},"scope":58373,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":58362,"nodeType":"FunctionDefinition","src":"3871:230:283","nodes":[],"documentation":{"id":58346,"nodeType":"StructuredDocumentation","src":"3077:789:283","text":"  @notice Lets an account claim a given quantity of NFTs.\n  @param receiver                       The receiver of the NFTs to claim.\n  @param quantity                       The quantity of NFTs to claim.\n  @param currency                       The currency in which to pay for the claim.\n  @param pricePerToken                  The price per token to pay for the claim.\n  @param proofs                         The proof of the claimer's inclusion in the merkle root allowlist\n                                        of the claim conditions that apply.\n  @param proofMaxQuantityPerTransaction (Optional) The maximum number of NFTs an address included in an\n                                        allowlist can claim."},"functionSelector":"7a5a8e7e","implemented":false,"kind":"function","modifiers":[],"name":"claim","nameLocation":"3880:5:283","parameters":{"id":58360,"nodeType":"ParameterList","parameters":[{"constant":false,"id":58348,"mutability":"mutable","name":"receiver","nameLocation":"3903:8:283","nodeType":"VariableDeclaration","scope":58362,"src":"3895:16:283","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":58347,"name":"address","nodeType":"ElementaryTypeName","src":"3895:7:283","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":58350,"mutability":"mutable","name":"quantity","nameLocation":"3929:8:283","nodeType":"VariableDeclaration","scope":58362,"src":"3921:16:283","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":58349,"name":"uint256","nodeType":"ElementaryTypeName","src":"3921:7:283","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":58352,"mutability":"mutable","name":"currency","nameLocation":"3955:8:283","nodeType":"VariableDeclaration","scope":58362,"src":"3947:16:283","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":58351,"name":"address","nodeType":"ElementaryTypeName","src":"3947:7:283","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":58354,"mutability":"mutable","name":"pricePerToken","nameLocation":"3981:13:283","nodeType":"VariableDeclaration","scope":58362,"src":"3973:21:283","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":58353,"name":"uint256","nodeType":"ElementaryTypeName","src":"3973:7:283","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":58357,"mutability":"mutable","name":"proofs","nameLocation":"4023:6:283","nodeType":"VariableDeclaration","scope":58362,"src":"4004:25:283","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":58355,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4004:7:283","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":58356,"nodeType":"ArrayTypeName","src":"4004:9:283","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":58359,"mutability":"mutable","name":"proofMaxQuantityPerTransaction","nameLocation":"4047:30:283","nodeType":"VariableDeclaration","scope":58362,"src":"4039:38:283","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":58358,"name":"uint256","nodeType":"ElementaryTypeName","src":"4039:7:283","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3885:198:283"},"returnParameters":{"id":58361,"nodeType":"ParameterList","parameters":[],"src":"4100:0:283"},"scope":58373,"stateMutability":"payable","virtual":false,"visibility":"external"},{"id":58372,"nodeType":"FunctionDefinition","src":"4544:99:283","nodes":[],"documentation":{"id":58363,"nodeType":"StructuredDocumentation","src":"4107:432:283","text":"  @notice Lets a contract admin (account with `DEFAULT_ADMIN_ROLE`) set claim conditions.\n  @param phases                Claim conditions in ascending order by `startTimestamp`.\n  @param resetClaimEligibility Whether to reset `limitLastClaimTimestamp` and\n                               `limitMerkleProofClaim` values when setting new\n                               claim conditions."},"functionSelector":"e23b8164","implemented":false,"kind":"function","modifiers":[],"name":"setClaimConditions","nameLocation":"4553:18:283","parameters":{"id":58370,"nodeType":"ParameterList","parameters":[{"constant":false,"id":58367,"mutability":"mutable","name":"phases","nameLocation":"4598:6:283","nodeType":"VariableDeclaration","scope":58372,"src":"4572:32:283","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_ClaimCondition_$58059_calldata_ptr_$dyn_calldata_ptr","typeString":"struct IDropClaimCondition_V2.ClaimCondition[]"},"typeName":{"baseType":{"id":58365,"nodeType":"UserDefinedTypeName","pathNode":{"id":58364,"name":"ClaimCondition","nameLocations":["4572:14:283"],"nodeType":"IdentifierPath","referencedDeclaration":58059,"src":"4572:14:283"},"referencedDeclaration":58059,"src":"4572:14:283","typeDescriptions":{"typeIdentifier":"t_struct$_ClaimCondition_$58059_storage_ptr","typeString":"struct IDropClaimCondition_V2.ClaimCondition"}},"id":58366,"nodeType":"ArrayTypeName","src":"4572:16:283","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_ClaimCondition_$58059_storage_$dyn_storage_ptr","typeString":"struct IDropClaimCondition_V2.ClaimCondition[]"}},"visibility":"internal"},{"constant":false,"id":58369,"mutability":"mutable","name":"resetClaimEligibility","nameLocation":"4611:21:283","nodeType":"VariableDeclaration","scope":58372,"src":"4606:26:283","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":58368,"name":"bool","nodeType":"ElementaryTypeName","src":"4606:4:283","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4571:62:283"},"returnParameters":{"id":58371,"nodeType":"ParameterList","parameters":[],"src":"4642:0:283"},"scope":58373,"stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"abstract":false,"baseContracts":[{"baseName":{"id":58277,"name":"IERC721Upgradeable","nameLocations":["1137:18:283"],"nodeType":"IdentifierPath","referencedDeclaration":159173,"src":"1137:18:283"},"id":58278,"nodeType":"InheritanceSpecifier","src":"1137:18:283"},{"baseName":{"id":58279,"name":"IDropClaimCondition_V2","nameLocations":["1157:22:283"],"nodeType":"IdentifierPath","referencedDeclaration":58082,"src":"1157:22:283"},"id":58280,"nodeType":"InheritanceSpecifier","src":"1157:22:283"}],"canonicalName":"IDropERC721_V3","contractDependencies":[],"contractKind":"interface","documentation":{"id":58276,"nodeType":"StructuredDocumentation","src":"209:898:283","text":"  Thirdweb's 'Drop' contracts are distribution mechanisms for tokens. The\n  `DropERC721` contract is a distribution mechanism for ERC721 tokens.\n  A minter wallet (i.e. holder of `MINTER_ROLE`) can (lazy)mint 'n' tokens\n  at once by providing a single base URI for all tokens being lazy minted.\n  The URI for each of the 'n' tokens lazy minted is the provided base URI +\n  `{tokenId}` of the respective token. (e.g. \"ipsf://Qmece.../1\").\n  A minter can choose to lazy mint 'delayed-reveal' tokens. More on 'delayed-reveal'\n  tokens in [this article](https://blog.thirdweb.com/delayed-reveal-nfts).\n  A contract admin (i.e. holder of `DEFAULT_ADMIN_ROLE`) can create claim conditions\n  with non-overlapping time windows, and accounts can claim the tokens according to\n  restrictions defined in the claim condition that is active at the time of the transaction."},"fullyImplemented":false,"linearizedBaseContracts":[58373,58082,159173,162577],"name":"IDropERC721_V3","nameLocation":"1119:14:283","scope":58374,"usedErrors":[],"usedEvents":[58293,58304,58311,58318,58323,58330,58335,159072,159081,159090]}],"license":"Apache-2.0"},"id":283}