{"abi":[{"type":"function","name":"claim","inputs":[{"name":"_receiver","type":"address","internalType":"address"},{"name":"_tokenId","type":"uint256","internalType":"uint256"},{"name":"_quantity","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"payable"},{"type":"function","name":"verifyClaim","inputs":[{"name":"_claimer","type":"address","internalType":"address"},{"name":"_tokenId","type":"uint256","internalType":"uint256"},{"name":"_quantity","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"view"},{"type":"event","name":"TokensClaimed","inputs":[{"name":"claimer","type":"address","indexed":true,"internalType":"address"},{"name":"receiver","type":"address","indexed":true,"internalType":"address"},{"name":"tokenId","type":"uint256","indexed":true,"internalType":"uint256"},{"name":"quantityClaimed","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"claim(address,uint256,uint256)":"2bc43fd9","verifyClaim(address,uint256,uint256)":"4bbb1abf"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantityClaimed\",\"type\":\"uint256\"}],\"name\":\"TokensClaimed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_claimer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"verifyClaim\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"thirdweb\",\"events\":{\"TokensClaimed(address,address,uint256,uint256)\":{\"details\":\"Emitted when tokens are claimed\"}},\"kind\":\"dev\",\"methods\":{\"claim(address,uint256,uint256)\":{\"details\":\"The logic in the `verifyClaim` function determines whether the caller is authorized to mint NFTs.\",\"params\":{\"_quantity\":\"The number of tokens to mint.\",\"_receiver\":\"The recipient of the tokens to mint.\",\"_tokenId\":\"The tokenId of the lazy minted NFT to mint.\"}},\"verifyClaim(address,uint256,uint256)\":{\"details\":\"Checks a request to claim NFTs against a custom condition.\",\"params\":{\"_claimer\":\"Caller of the claim function.\",\"_quantity\":\"The number of NFTs being claimed.\",\"_tokenId\":\"The tokenId of the lazy minted NFT to mint.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claim(address,uint256,uint256)\":{\"notice\":\"Lets an address claim multiple lazy minted NFTs at once to a recipient.                   Contract creators should override this function to create custom logic for claiming,                   for e.g. price collection, allowlist, max quantity, etc.\"},\"verifyClaim(address,uint256,uint256)\":{\"notice\":\"Override this function to add logic for claim verification, based on conditions                   such as allowlist, price, max quantity etc.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/extension/interface/IClaimableERC1155.sol\":\"IClaimableERC1155\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[\":@chainlink/=lib/chainlink/\",\":@ds-test/=lib/ds-test/src/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@std/=lib/forge-std/src/\",\":@thirdweb-dev/dynamic-contracts/=lib/dynamic-contracts/\",\":ERC721A-Upgradeable/=lib/ERC721A-Upgradeable/contracts/\",\":ERC721A/=lib/ERC721A/contracts/\",\":chainlink/=lib/chainlink/contracts/\",\":contracts/=contracts/\",\":ds-test/=lib/ds-test/src/\",\":dynamic-contracts/=lib/dynamic-contracts/src/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":erc721a-upgradeable/=lib/ERC721A-Upgradeable/\",\":erc721a/=lib/ERC721A/\",\":forge-std/=lib/forge-std/src/\",\":lib/sstore2/=lib/dynamic-contracts/lib/sstore2/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sstore2/=lib/dynamic-contracts/lib/sstore2/contracts/\"]},\"sources\":{\"contracts/extension/interface/IClaimableERC1155.sol\":{\"keccak256\":\"0x3fdfdad356fdd98e5dd1ec1f65d921c696b44bd9505f92a8440ad2430cfbb48c\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://bbc4177861066675e9e13caeead661f9003553c22edf1e4d5ed43062f497b52b\",\"dweb:/ipfs/QmPWERVCFoaCKkBnSNetX1YDhF7VtDVK6yEVYruubZRE1Q\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.23+commit.f704f362"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"claimer","type":"address","indexed":true},{"internalType":"address","name":"receiver","type":"address","indexed":true},{"internalType":"uint256","name":"tokenId","type":"uint256","indexed":true},{"internalType":"uint256","name":"quantityClaimed","type":"uint256","indexed":false}],"type":"event","name":"TokensClaimed","anonymous":false},{"inputs":[{"internalType":"address","name":"_receiver","type":"address"},{"internalType":"uint256","name":"_tokenId","type":"uint256"},{"internalType":"uint256","name":"_quantity","type":"uint256"}],"stateMutability":"payable","type":"function","name":"claim"},{"inputs":[{"internalType":"address","name":"_claimer","type":"address"},{"internalType":"uint256","name":"_tokenId","type":"uint256"},{"internalType":"uint256","name":"_quantity","type":"uint256"}],"stateMutability":"view","type":"function","name":"verifyClaim"}],"devdoc":{"kind":"dev","methods":{"claim(address,uint256,uint256)":{"details":"The logic in the `verifyClaim` function determines whether the caller is authorized to mint NFTs.","params":{"_quantity":"The number of tokens to mint.","_receiver":"The recipient of the tokens to mint.","_tokenId":"The tokenId of the lazy minted NFT to mint."}},"verifyClaim(address,uint256,uint256)":{"details":"Checks a request to claim NFTs against a custom condition.","params":{"_claimer":"Caller of the claim function.","_quantity":"The number of NFTs being claimed.","_tokenId":"The tokenId of the lazy minted NFT to mint."}}},"version":1},"userdoc":{"kind":"user","methods":{"claim(address,uint256,uint256)":{"notice":"Lets an address claim multiple lazy minted NFTs at once to a recipient.                   Contract creators should override this function to create custom logic for claiming,                   for e.g. price collection, allowlist, max quantity, etc."},"verifyClaim(address,uint256,uint256)":{"notice":"Override this function to add logic for claim verification, based on conditions                   such as allowlist, price, max quantity etc."}},"version":1}},"settings":{"remappings":["@chainlink/=lib/chainlink/","@ds-test/=lib/ds-test/src/","@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/","@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","@std/=lib/forge-std/src/","@thirdweb-dev/dynamic-contracts/=lib/dynamic-contracts/","ERC721A-Upgradeable/=lib/ERC721A-Upgradeable/contracts/","ERC721A/=lib/ERC721A/contracts/","chainlink/=lib/chainlink/contracts/","contracts/=contracts/","ds-test/=lib/ds-test/src/","dynamic-contracts/=lib/dynamic-contracts/src/","erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/","erc721a-upgradeable/=lib/ERC721A-Upgradeable/","erc721a/=lib/ERC721A/","forge-std/=lib/forge-std/src/","lib/sstore2/=lib/dynamic-contracts/lib/sstore2/","openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/","openzeppelin-contracts/=lib/openzeppelin-contracts/","openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/","sstore2/=lib/dynamic-contracts/lib/sstore2/contracts/"],"optimizer":{"enabled":true,"runs":20},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"contracts/extension/interface/IClaimableERC1155.sol":"IClaimableERC1155"},"libraries":{}},"sources":{"contracts/extension/interface/IClaimableERC1155.sol":{"keccak256":"0x3fdfdad356fdd98e5dd1ec1f65d921c696b44bd9505f92a8440ad2430cfbb48c","urls":["bzz-raw://bbc4177861066675e9e13caeead661f9003553c22edf1e4d5ed43062f497b52b","dweb:/ipfs/QmPWERVCFoaCKkBnSNetX1YDhF7VtDVK6yEVYruubZRE1Q"],"license":"Apache-2.0"}},"version":1},"ast":{"absolutePath":"contracts/extension/interface/IClaimableERC1155.sol","id":32864,"exportedSymbols":{"IClaimableERC1155":[32863]},"nodeType":"SourceUnit","src":"39:1583:106","nodes":[{"id":32830,"nodeType":"PragmaDirective","src":"39:23:106","nodes":[],"literals":["solidity","^","0.8",".0"]},{"id":32863,"nodeType":"ContractDefinition","src":"86:1535:106","nodes":[{"id":32842,"nodeType":"EventDefinition","src":"165:159:106","nodes":[],"anonymous":false,"documentation":{"id":32832,"nodeType":"StructuredDocumentation","src":"120:40:106","text":"@dev Emitted when tokens are claimed"},"eventSelector":"ff097c7d8b1957a4ff09ef1361b5fb54dcede3941ba836d0beb9d10bec725de6","name":"TokensClaimed","nameLocation":"171:13:106","parameters":{"id":32841,"nodeType":"ParameterList","parameters":[{"constant":false,"id":32834,"indexed":true,"mutability":"mutable","name":"claimer","nameLocation":"210:7:106","nodeType":"VariableDeclaration","scope":32842,"src":"194:23:106","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":32833,"name":"address","nodeType":"ElementaryTypeName","src":"194:7:106","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":32836,"indexed":true,"mutability":"mutable","name":"receiver","nameLocation":"243:8:106","nodeType":"VariableDeclaration","scope":32842,"src":"227:24:106","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":32835,"name":"address","nodeType":"ElementaryTypeName","src":"227:7:106","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":32838,"indexed":true,"mutability":"mutable","name":"tokenId","nameLocation":"277:7:106","nodeType":"VariableDeclaration","scope":32842,"src":"261:23:106","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":32837,"name":"uint256","nodeType":"ElementaryTypeName","src":"261:7:106","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":32840,"indexed":false,"mutability":"mutable","name":"quantityClaimed","nameLocation":"302:15:106","nodeType":"VariableDeclaration","scope":32842,"src":"294:23:106","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":32839,"name":"uint256","nodeType":"ElementaryTypeName","src":"294:7:106","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"184:139:106"}},{"id":32852,"nodeType":"FunctionDefinition","src":"961:88:106","nodes":[],"documentation":{"id":32843,"nodeType":"StructuredDocumentation","src":"330:626:106","text":"  @notice          Lets an address claim multiple lazy minted NFTs at once to a recipient.\n                   Contract creators should override this function to create custom logic for claiming,\n                   for e.g. price collection, allowlist, max quantity, etc.\n  @dev             The logic in the `verifyClaim` function determines whether the caller is authorized to mint NFTs.\n  @param _receiver  The recipient of the tokens to mint.\n  @param _tokenId   The tokenId of the lazy minted NFT to mint.\n  @param _quantity  The number of tokens to mint."},"functionSelector":"2bc43fd9","implemented":false,"kind":"function","modifiers":[],"name":"claim","nameLocation":"970:5:106","parameters":{"id":32850,"nodeType":"ParameterList","parameters":[{"constant":false,"id":32845,"mutability":"mutable","name":"_receiver","nameLocation":"984:9:106","nodeType":"VariableDeclaration","scope":32852,"src":"976:17:106","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":32844,"name":"address","nodeType":"ElementaryTypeName","src":"976:7:106","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":32847,"mutability":"mutable","name":"_tokenId","nameLocation":"1003:8:106","nodeType":"VariableDeclaration","scope":32852,"src":"995:16:106","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":32846,"name":"uint256","nodeType":"ElementaryTypeName","src":"995:7:106","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":32849,"mutability":"mutable","name":"_quantity","nameLocation":"1021:9:106","nodeType":"VariableDeclaration","scope":32852,"src":"1013:17:106","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":32848,"name":"uint256","nodeType":"ElementaryTypeName","src":"1013:7:106","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"975:56:106"},"returnParameters":{"id":32851,"nodeType":"ParameterList","parameters":[],"src":"1048:0:106"},"scope":32863,"stateMutability":"payable","virtual":false,"visibility":"external"},{"id":32862,"nodeType":"FunctionDefinition","src":"1529:90:106","nodes":[],"documentation":{"id":32853,"nodeType":"StructuredDocumentation","src":"1055:469:106","text":"  @notice          Override this function to add logic for claim verification, based on conditions\n                   such as allowlist, price, max quantity etc.\n  @dev             Checks a request to claim NFTs against a custom condition.\n  @param _claimer   Caller of the claim function.\n  @param _tokenId   The tokenId of the lazy minted NFT to mint.\n  @param _quantity  The number of NFTs being claimed."},"functionSelector":"4bbb1abf","implemented":false,"kind":"function","modifiers":[],"name":"verifyClaim","nameLocation":"1538:11:106","parameters":{"id":32860,"nodeType":"ParameterList","parameters":[{"constant":false,"id":32855,"mutability":"mutable","name":"_claimer","nameLocation":"1558:8:106","nodeType":"VariableDeclaration","scope":32862,"src":"1550:16:106","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":32854,"name":"address","nodeType":"ElementaryTypeName","src":"1550:7:106","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":32857,"mutability":"mutable","name":"_tokenId","nameLocation":"1576:8:106","nodeType":"VariableDeclaration","scope":32862,"src":"1568:16:106","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":32856,"name":"uint256","nodeType":"ElementaryTypeName","src":"1568:7:106","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":32859,"mutability":"mutable","name":"_quantity","nameLocation":"1594:9:106","nodeType":"VariableDeclaration","scope":32862,"src":"1586:17:106","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":32858,"name":"uint256","nodeType":"ElementaryTypeName","src":"1586:7:106","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1549:55:106"},"returnParameters":{"id":32861,"nodeType":"ParameterList","parameters":[],"src":"1618:0:106"},"scope":32863,"stateMutability":"view","virtual":false,"visibility":"external"}],"abstract":false,"baseContracts":[],"canonicalName":"IClaimableERC1155","contractDependencies":[],"contractKind":"interface","documentation":{"id":32831,"nodeType":"StructuredDocumentation","src":"64:21:106","text":"@author thirdweb"},"fullyImplemented":false,"linearizedBaseContracts":[32863],"name":"IClaimableERC1155","nameLocation":"96:17:106","scope":32864,"usedErrors":[],"usedEvents":[32842]}],"license":"Apache-2.0"},"id":106}