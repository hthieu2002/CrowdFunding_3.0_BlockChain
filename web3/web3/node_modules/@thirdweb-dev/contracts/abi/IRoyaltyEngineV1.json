{"abi":[{"type":"function","name":"getRoyalty","inputs":[{"name":"tokenAddress","type":"address","internalType":"address"},{"name":"tokenId","type":"uint256","internalType":"uint256"},{"name":"value","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"recipients","type":"address[]","internalType":"address payable[]"},{"name":"amounts","type":"uint256[]","internalType":"uint256[]"}],"stateMutability":"nonpayable"},{"type":"function","name":"getRoyaltyView","inputs":[{"name":"tokenAddress","type":"address","internalType":"address"},{"name":"tokenId","type":"uint256","internalType":"uint256"},{"name":"value","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"recipients","type":"address[]","internalType":"address payable[]"},{"name":"amounts","type":"uint256[]","internalType":"uint256[]"}],"stateMutability":"view"},{"type":"function","name":"supportsInterface","inputs":[{"name":"interfaceId","type":"bytes4","internalType":"bytes4"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"getRoyalty(address,uint256,uint256)":"f533b802","getRoyaltyView(address,uint256,uint256)":"3e104014","supportsInterface(bytes4)":"01ffc9a7"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"getRoyalty\",\"outputs\":[{\"internalType\":\"address payable[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"getRoyaltyView\",\"outputs\":[{\"internalType\":\"address payable[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Lookup engine interface\",\"kind\":\"dev\",\"methods\":{\"getRoyalty(address,uint256,uint256)\":{\"params\":{\"tokenAddress\":\"- The address of the token\",\"tokenId\":\"- The id of the token\",\"value\":\"- The value you wish to get the royalty of returns Two arrays of equal length, royalty recipients and the corresponding amount each recipient should get\"}},\"getRoyaltyView(address,uint256,uint256)\":{\"params\":{\"tokenAddress\":\"- The address of the token\",\"tokenId\":\"- The id of the token\",\"value\":\"- The value you wish to get the royalty of returns Two arrays of equal length, royalty recipients and the corresponding amount each recipient should get\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getRoyalty(address,uint256,uint256)\":{\"notice\":\"Get the royalty for a given token (address, id) and value amount.  Does not cache the bps/amounts.  Caches the spec for a given token address\"},\"getRoyaltyView(address,uint256,uint256)\":{\"notice\":\"View only version of getRoyalty\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/extension/interface/IRoyaltyEngineV1.sol\":\"IRoyaltyEngineV1\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[\":@chainlink/=lib/chainlink/\",\":@ds-test/=lib/ds-test/src/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@std/=lib/forge-std/src/\",\":@thirdweb-dev/dynamic-contracts/=lib/dynamic-contracts/\",\":ERC721A-Upgradeable/=lib/ERC721A-Upgradeable/contracts/\",\":ERC721A/=lib/ERC721A/contracts/\",\":chainlink/=lib/chainlink/contracts/\",\":contracts/=contracts/\",\":ds-test/=lib/ds-test/src/\",\":dynamic-contracts/=lib/dynamic-contracts/src/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":erc721a-upgradeable/=lib/ERC721A-Upgradeable/\",\":erc721a/=lib/ERC721A/\",\":forge-std/=lib/forge-std/src/\",\":lib/sstore2/=lib/dynamic-contracts/lib/sstore2/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sstore2/=lib/dynamic-contracts/lib/sstore2/contracts/\"]},\"sources\":{\"contracts/extension/interface/IRoyaltyEngineV1.sol\":{\"keccak256\":\"0xd234744fda99e69a40bcd0771a236d001a178b69c0db8ec7e9ddcf4610304568\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7ab39c118f97caccab6bc70f36a4e85d636dc7b74cf5e57515e73eab52e453b4\",\"dweb:/ipfs/QmQvkmJvnBiUCvPW3fPKnmWwHxLv3YSGKXB6gdtRewN1XN\"]},\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.23+commit.f704f362"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"tokenAddress","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"uint256","name":"value","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"getRoyalty","outputs":[{"internalType":"address payable[]","name":"recipients","type":"address[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}]},{"inputs":[{"internalType":"address","name":"tokenAddress","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"uint256","name":"value","type":"uint256"}],"stateMutability":"view","type":"function","name":"getRoyaltyView","outputs":[{"internalType":"address payable[]","name":"recipients","type":"address[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}]},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"stateMutability":"view","type":"function","name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}]}],"devdoc":{"kind":"dev","methods":{"getRoyalty(address,uint256,uint256)":{"params":{"tokenAddress":"- The address of the token","tokenId":"- The id of the token","value":"- The value you wish to get the royalty of returns Two arrays of equal length, royalty recipients and the corresponding amount each recipient should get"}},"getRoyaltyView(address,uint256,uint256)":{"params":{"tokenAddress":"- The address of the token","tokenId":"- The id of the token","value":"- The value you wish to get the royalty of returns Two arrays of equal length, royalty recipients and the corresponding amount each recipient should get"}},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"userdoc":{"kind":"user","methods":{"getRoyalty(address,uint256,uint256)":{"notice":"Get the royalty for a given token (address, id) and value amount.  Does not cache the bps/amounts.  Caches the spec for a given token address"},"getRoyaltyView(address,uint256,uint256)":{"notice":"View only version of getRoyalty"}},"version":1}},"settings":{"remappings":["@chainlink/=lib/chainlink/","@ds-test/=lib/ds-test/src/","@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/","@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","@std/=lib/forge-std/src/","@thirdweb-dev/dynamic-contracts/=lib/dynamic-contracts/","ERC721A-Upgradeable/=lib/ERC721A-Upgradeable/contracts/","ERC721A/=lib/ERC721A/contracts/","chainlink/=lib/chainlink/contracts/","contracts/=contracts/","ds-test/=lib/ds-test/src/","dynamic-contracts/=lib/dynamic-contracts/src/","erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/","erc721a-upgradeable/=lib/ERC721A-Upgradeable/","erc721a/=lib/ERC721A/","forge-std/=lib/forge-std/src/","lib/sstore2/=lib/dynamic-contracts/lib/sstore2/","openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/","openzeppelin-contracts/=lib/openzeppelin-contracts/","openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/","sstore2/=lib/dynamic-contracts/lib/sstore2/contracts/"],"optimizer":{"enabled":true,"runs":20},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"contracts/extension/interface/IRoyaltyEngineV1.sol":"IRoyaltyEngineV1"},"libraries":{}},"sources":{"contracts/extension/interface/IRoyaltyEngineV1.sol":{"keccak256":"0xd234744fda99e69a40bcd0771a236d001a178b69c0db8ec7e9ddcf4610304568","urls":["bzz-raw://7ab39c118f97caccab6bc70f36a4e85d636dc7b74cf5e57515e73eab52e453b4","dweb:/ipfs/QmQvkmJvnBiUCvPW3fPKnmWwHxLv3YSGKXB6gdtRewN1XN"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol":{"keccak256":"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1","urls":["bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f","dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy"],"license":"MIT"}},"version":1},"ast":{"absolutePath":"contracts/extension/interface/IRoyaltyEngineV1.sol","id":33950,"exportedSymbols":{"IERC165":[172922],"IRoyaltyEngineV1":[33949]},"nodeType":"SourceUnit","src":"33:1419:132","nodes":[{"id":33912,"nodeType":"PragmaDirective","src":"33:23:132","nodes":[],"literals":["solidity","^","0.8",".0"]},{"id":33913,"nodeType":"ImportDirective","src":"85:65:132","nodes":[],"absolutePath":"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol","file":"@openzeppelin/contracts/utils/introspection/IERC165.sol","nameLocation":"-1:-1:-1","scope":33950,"sourceUnit":172923,"symbolAliases":[],"unitAlias":""},{"id":33949,"nodeType":"ContractDefinition","src":"192:1259:132","nodes":[{"id":33932,"nodeType":"FunctionDefinition","src":"705:185:132","nodes":[],"documentation":{"id":33917,"nodeType":"StructuredDocumentation","src":"236:464:132","text":" Get the royalty for a given token (address, id) and value amount.  Does not cache the bps/amounts.  Caches the spec for a given token address\n @param tokenAddress - The address of the token\n @param tokenId      - The id of the token\n @param value        - The value you wish to get the royalty of\n returns Two arrays of equal length, royalty recipients and the corresponding amount each recipient should get"},"functionSelector":"f533b802","implemented":false,"kind":"function","modifiers":[],"name":"getRoyalty","nameLocation":"714:10:132","parameters":{"id":33924,"nodeType":"ParameterList","parameters":[{"constant":false,"id":33919,"mutability":"mutable","name":"tokenAddress","nameLocation":"742:12:132","nodeType":"VariableDeclaration","scope":33932,"src":"734:20:132","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":33918,"name":"address","nodeType":"ElementaryTypeName","src":"734:7:132","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":33921,"mutability":"mutable","name":"tokenId","nameLocation":"772:7:132","nodeType":"VariableDeclaration","scope":33932,"src":"764:15:132","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":33920,"name":"uint256","nodeType":"ElementaryTypeName","src":"764:7:132","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":33923,"mutability":"mutable","name":"value","nameLocation":"797:5:132","nodeType":"VariableDeclaration","scope":33932,"src":"789:13:132","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":33922,"name":"uint256","nodeType":"ElementaryTypeName","src":"789:7:132","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"724:84:132"},"returnParameters":{"id":33931,"nodeType":"ParameterList","parameters":[{"constant":false,"id":33927,"mutability":"mutable","name":"recipients","nameLocation":"852:10:132","nodeType":"VariableDeclaration","scope":33932,"src":"827:35:132","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_memory_ptr","typeString":"address payable[]"},"typeName":{"baseType":{"id":33925,"name":"address","nodeType":"ElementaryTypeName","src":"827:15:132","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":33926,"nodeType":"ArrayTypeName","src":"827:17:132","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage_ptr","typeString":"address payable[]"}},"visibility":"internal"},{"constant":false,"id":33930,"mutability":"mutable","name":"amounts","nameLocation":"881:7:132","nodeType":"VariableDeclaration","scope":33932,"src":"864:24:132","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":33928,"name":"uint256","nodeType":"ElementaryTypeName","src":"864:7:132","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":33929,"nodeType":"ArrayTypeName","src":"864:9:132","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"826:63:132"},"scope":33949,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":33948,"nodeType":"FunctionDefinition","src":"1255:194:132","nodes":[],"documentation":{"id":33933,"nodeType":"StructuredDocumentation","src":"896:354:132","text":" View only version of getRoyalty\n @param tokenAddress - The address of the token\n @param tokenId      - The id of the token\n @param value        - The value you wish to get the royalty of\n returns Two arrays of equal length, royalty recipients and the corresponding amount each recipient should get"},"functionSelector":"3e104014","implemented":false,"kind":"function","modifiers":[],"name":"getRoyaltyView","nameLocation":"1264:14:132","parameters":{"id":33940,"nodeType":"ParameterList","parameters":[{"constant":false,"id":33935,"mutability":"mutable","name":"tokenAddress","nameLocation":"1296:12:132","nodeType":"VariableDeclaration","scope":33948,"src":"1288:20:132","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":33934,"name":"address","nodeType":"ElementaryTypeName","src":"1288:7:132","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":33937,"mutability":"mutable","name":"tokenId","nameLocation":"1326:7:132","nodeType":"VariableDeclaration","scope":33948,"src":"1318:15:132","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":33936,"name":"uint256","nodeType":"ElementaryTypeName","src":"1318:7:132","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":33939,"mutability":"mutable","name":"value","nameLocation":"1351:5:132","nodeType":"VariableDeclaration","scope":33948,"src":"1343:13:132","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":33938,"name":"uint256","nodeType":"ElementaryTypeName","src":"1343:7:132","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1278:84:132"},"returnParameters":{"id":33947,"nodeType":"ParameterList","parameters":[{"constant":false,"id":33943,"mutability":"mutable","name":"recipients","nameLocation":"1411:10:132","nodeType":"VariableDeclaration","scope":33948,"src":"1386:35:132","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_memory_ptr","typeString":"address payable[]"},"typeName":{"baseType":{"id":33941,"name":"address","nodeType":"ElementaryTypeName","src":"1386:15:132","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":33942,"nodeType":"ArrayTypeName","src":"1386:17:132","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage_ptr","typeString":"address payable[]"}},"visibility":"internal"},{"constant":false,"id":33946,"mutability":"mutable","name":"amounts","nameLocation":"1440:7:132","nodeType":"VariableDeclaration","scope":33948,"src":"1423:24:132","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":33944,"name":"uint256","nodeType":"ElementaryTypeName","src":"1423:7:132","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":33945,"nodeType":"ArrayTypeName","src":"1423:9:132","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"1385:63:132"},"scope":33949,"stateMutability":"view","virtual":false,"visibility":"external"}],"abstract":false,"baseContracts":[{"baseName":{"id":33915,"name":"IERC165","nameLocations":["222:7:132"],"nodeType":"IdentifierPath","referencedDeclaration":172922,"src":"222:7:132"},"id":33916,"nodeType":"InheritanceSpecifier","src":"222:7:132"}],"canonicalName":"IRoyaltyEngineV1","contractDependencies":[],"contractKind":"interface","documentation":{"id":33914,"nodeType":"StructuredDocumentation","src":"152:39:132","text":" @dev Lookup engine interface"},"fullyImplemented":false,"linearizedBaseContracts":[33949,172922],"name":"IRoyaltyEngineV1","nameLocation":"202:16:132","scope":33950,"usedErrors":[],"usedEvents":[]}],"license":"MIT"},"id":132}