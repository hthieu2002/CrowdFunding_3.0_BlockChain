{"abi":[{"type":"function","name":"entryPoint","inputs":[],"outputs":[{"name":"","type":"address","internalType":"contract IEntryPoint"}],"stateMutability":"view"},{"type":"function","name":"getNonce","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"validateUserOp","inputs":[{"name":"userOp","type":"tuple","internalType":"struct UserOperation","components":[{"name":"sender","type":"address","internalType":"address"},{"name":"nonce","type":"uint256","internalType":"uint256"},{"name":"initCode","type":"bytes","internalType":"bytes"},{"name":"callData","type":"bytes","internalType":"bytes"},{"name":"callGasLimit","type":"uint256","internalType":"uint256"},{"name":"verificationGasLimit","type":"uint256","internalType":"uint256"},{"name":"preVerificationGas","type":"uint256","internalType":"uint256"},{"name":"maxFeePerGas","type":"uint256","internalType":"uint256"},{"name":"maxPriorityFeePerGas","type":"uint256","internalType":"uint256"},{"name":"paymasterAndData","type":"bytes","internalType":"bytes"},{"name":"signature","type":"bytes","internalType":"bytes"}]},{"name":"userOpHash","type":"bytes32","internalType":"bytes32"},{"name":"missingAccountFunds","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"validationData","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"entryPoint()":"b0d691fe","getNonce()":"d087d288","validateUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32,uint256)":"3a871cdd"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"entryPoint\",\"outputs\":[{\"internalType\":\"contract IEntryPoint\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"callGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verificationGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preVerificationGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriorityFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"paymasterAndData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct UserOperation\",\"name\":\"userOp\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"userOpHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"missingAccountFunds\",\"type\":\"uint256\"}],\"name\":\"validateUserOp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"validationData\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"entryPoint()\":{\"notice\":\"return the entryPoint used by this account. subclass should return the current entryPoint used by this account.\"},\"getNonce()\":{\"notice\":\"Return the account nonce. This method returns the next sequential nonce. For a nonce of a specific key, use `entrypoint.getNonce(account, key)`\"},\"validateUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32,uint256)\":{\"notice\":\"Validate user's signature and nonce. subclass doesn't need to override this method. Instead, it should override the specific internal validation methods.\"}},\"notice\":\"Basic account implementation. this contract provides the basic logic for implementing the IAccount interface  - validateUserOp specific account implementation should inherit it and provide the account-specific logic\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/prebuilts/account/utils/BaseAccount.sol\":\"BaseAccount\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[\":@chainlink/=lib/chainlink/\",\":@ds-test/=lib/ds-test/src/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@std/=lib/forge-std/src/\",\":@thirdweb-dev/dynamic-contracts/=lib/dynamic-contracts/\",\":ERC721A-Upgradeable/=lib/ERC721A-Upgradeable/contracts/\",\":ERC721A/=lib/ERC721A/contracts/\",\":chainlink/=lib/chainlink/contracts/\",\":contracts/=contracts/\",\":ds-test/=lib/ds-test/src/\",\":dynamic-contracts/=lib/dynamic-contracts/src/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":erc721a-upgradeable/=lib/ERC721A-Upgradeable/\",\":erc721a/=lib/ERC721A/\",\":forge-std/=lib/forge-std/src/\",\":lib/sstore2/=lib/dynamic-contracts/lib/sstore2/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sstore2/=lib/dynamic-contracts/lib/sstore2/contracts/\"]},\"sources\":{\"contracts/prebuilts/account/interface/IAccount.sol\":{\"keccak256\":\"0x98f2d41bd69f4b46a697957681d2e14cf2f10b6133ede864b838f821899d4e41\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://ddaae235044c84994f693a38030d3923bb8e65f9b7f1fc5028a424a16f7a723c\",\"dweb:/ipfs/QmdXzv1k9mdECGxUDigBf6GAb3bn3qMdTKcmGadJ4EoLzL\"]},\"contracts/prebuilts/account/interface/IAggregator.sol\":{\"keccak256\":\"0xf25b6da72dfcb022d6d3c16aaa4a2d9860bf51483356cb26b314b37a01e7a1bb\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://800a724a532870ae3de64fe798352427c9a3168cc44fe1320f1fecea8126df03\",\"dweb:/ipfs/QmNb1s7rDkKePrE4iKMQ3UJyrsScZRomLWf4aj6QBJnRAZ\"]},\"contracts/prebuilts/account/interface/IEntrypoint.sol\":{\"keccak256\":\"0x8108c62da675ac3e840e56c07dc74f04e6993d1f23812821082a92cfd6a079b1\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://abc88d73e8e22622456cc4079e8df66ce81a66e6fd280731c63875d7cb667f0c\",\"dweb:/ipfs/QmVpxV56vM6TbZEK5idNEtdvHtQ3dXMJdWXusm6cit3FPo\"]},\"contracts/prebuilts/account/interface/INonceManager.sol\":{\"keccak256\":\"0xf509795f7336c849ac5d247d71af20376b67201c647aa847fd17ca8e7909dec3\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://b3418173e37999ba0015bb352ab1b9dfbe1296143a8565ea3d3ce7a9a9e087b4\",\"dweb:/ipfs/QmS93Dw1FfPj5kHk9cLrh1VssbwNyaKKo5LNmEHwxzDqNp\"]},\"contracts/prebuilts/account/interface/IStakeManager.sol\":{\"keccak256\":\"0x61562da096c3c3da5755bbb5b552ea713723d7be36975cd401022ff321753b73\",\"license\":\"GPL-3.0-only\",\"urls\":[\"bzz-raw://e6bcd63477257007d2fcd92b38c8105cb82c2d0eae3836ac856839234481f4ab\",\"dweb:/ipfs/QmZuNE3y1RvtRXYiw3eiT25YQH2SAa1kFcpxAgW9KX6KtZ\"]},\"contracts/prebuilts/account/utils/BaseAccount.sol\":{\"keccak256\":\"0xe4c645052e3223dc617ce4fdb8c44eee6047f50187b38d2b19e8f88575a6362d\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://25f657768c1c652e7e68ba8ba3c4e667ff22872a7476c902ea7966092923f4aa\",\"dweb:/ipfs/QmRke55xXKGsKMoNFUtm17t2nqmgfSHfEgx4vrib8c3i7D\"]},\"contracts/prebuilts/account/utils/Helpers.sol\":{\"keccak256\":\"0x362ebd624a0a4893c8d80f2dc86b27198a6f22d3bca6d4ad648cd4f12b8b2e5d\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://bb43f98886861a0d1a6a80aaf8bfda8a2e8dace798e559dcba9fe5ebd2738817\",\"dweb:/ipfs/QmUfAk7cbLqfhJdGgZeCqdzHFxrtjQgcbGtcQEbioLUDuS\"]},\"contracts/prebuilts/account/utils/UserOperation.sol\":{\"keccak256\":\"0x3f3aa133687f459f9fb538835a54aa769418dd6303a02c9fa691690fcc397964\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://993f8daa2320ca301167767fff33a6989697394fe6dc65905edc4b32368850b5\",\"dweb:/ipfs/Qmaymg8dsE6mrfAWJPs4DXbHR1wxESJnxyFhNkm7AmKBCK\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.23+commit.f704f362"},"language":"Solidity","output":{"abi":[{"inputs":[],"stateMutability":"view","type":"function","name":"entryPoint","outputs":[{"internalType":"contract IEntryPoint","name":"","type":"address"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getNonce","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"struct UserOperation","name":"userOp","type":"tuple","components":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes","name":"initCode","type":"bytes"},{"internalType":"bytes","name":"callData","type":"bytes"},{"internalType":"uint256","name":"callGasLimit","type":"uint256"},{"internalType":"uint256","name":"verificationGasLimit","type":"uint256"},{"internalType":"uint256","name":"preVerificationGas","type":"uint256"},{"internalType":"uint256","name":"maxFeePerGas","type":"uint256"},{"internalType":"uint256","name":"maxPriorityFeePerGas","type":"uint256"},{"internalType":"bytes","name":"paymasterAndData","type":"bytes"},{"internalType":"bytes","name":"signature","type":"bytes"}]},{"internalType":"bytes32","name":"userOpHash","type":"bytes32"},{"internalType":"uint256","name":"missingAccountFunds","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"validateUserOp","outputs":[{"internalType":"uint256","name":"validationData","type":"uint256"}]}],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{"entryPoint()":{"notice":"return the entryPoint used by this account. subclass should return the current entryPoint used by this account."},"getNonce()":{"notice":"Return the account nonce. This method returns the next sequential nonce. For a nonce of a specific key, use `entrypoint.getNonce(account, key)`"},"validateUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32,uint256)":{"notice":"Validate user's signature and nonce. subclass doesn't need to override this method. Instead, it should override the specific internal validation methods."}},"version":1}},"settings":{"remappings":["@chainlink/=lib/chainlink/","@ds-test/=lib/ds-test/src/","@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/","@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","@std/=lib/forge-std/src/","@thirdweb-dev/dynamic-contracts/=lib/dynamic-contracts/","ERC721A-Upgradeable/=lib/ERC721A-Upgradeable/contracts/","ERC721A/=lib/ERC721A/contracts/","chainlink/=lib/chainlink/contracts/","contracts/=contracts/","ds-test/=lib/ds-test/src/","dynamic-contracts/=lib/dynamic-contracts/src/","erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/","erc721a-upgradeable/=lib/ERC721A-Upgradeable/","erc721a/=lib/ERC721A/","forge-std/=lib/forge-std/src/","lib/sstore2/=lib/dynamic-contracts/lib/sstore2/","openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/","openzeppelin-contracts/=lib/openzeppelin-contracts/","openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/","sstore2/=lib/dynamic-contracts/lib/sstore2/contracts/"],"optimizer":{"enabled":true,"runs":20},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"contracts/prebuilts/account/utils/BaseAccount.sol":"BaseAccount"},"libraries":{}},"sources":{"contracts/prebuilts/account/interface/IAccount.sol":{"keccak256":"0x98f2d41bd69f4b46a697957681d2e14cf2f10b6133ede864b838f821899d4e41","urls":["bzz-raw://ddaae235044c84994f693a38030d3923bb8e65f9b7f1fc5028a424a16f7a723c","dweb:/ipfs/QmdXzv1k9mdECGxUDigBf6GAb3bn3qMdTKcmGadJ4EoLzL"],"license":"GPL-3.0"},"contracts/prebuilts/account/interface/IAggregator.sol":{"keccak256":"0xf25b6da72dfcb022d6d3c16aaa4a2d9860bf51483356cb26b314b37a01e7a1bb","urls":["bzz-raw://800a724a532870ae3de64fe798352427c9a3168cc44fe1320f1fecea8126df03","dweb:/ipfs/QmNb1s7rDkKePrE4iKMQ3UJyrsScZRomLWf4aj6QBJnRAZ"],"license":"GPL-3.0"},"contracts/prebuilts/account/interface/IEntrypoint.sol":{"keccak256":"0x8108c62da675ac3e840e56c07dc74f04e6993d1f23812821082a92cfd6a079b1","urls":["bzz-raw://abc88d73e8e22622456cc4079e8df66ce81a66e6fd280731c63875d7cb667f0c","dweb:/ipfs/QmVpxV56vM6TbZEK5idNEtdvHtQ3dXMJdWXusm6cit3FPo"],"license":"GPL-3.0"},"contracts/prebuilts/account/interface/INonceManager.sol":{"keccak256":"0xf509795f7336c849ac5d247d71af20376b67201c647aa847fd17ca8e7909dec3","urls":["bzz-raw://b3418173e37999ba0015bb352ab1b9dfbe1296143a8565ea3d3ce7a9a9e087b4","dweb:/ipfs/QmS93Dw1FfPj5kHk9cLrh1VssbwNyaKKo5LNmEHwxzDqNp"],"license":"GPL-3.0"},"contracts/prebuilts/account/interface/IStakeManager.sol":{"keccak256":"0x61562da096c3c3da5755bbb5b552ea713723d7be36975cd401022ff321753b73","urls":["bzz-raw://e6bcd63477257007d2fcd92b38c8105cb82c2d0eae3836ac856839234481f4ab","dweb:/ipfs/QmZuNE3y1RvtRXYiw3eiT25YQH2SAa1kFcpxAgW9KX6KtZ"],"license":"GPL-3.0-only"},"contracts/prebuilts/account/utils/BaseAccount.sol":{"keccak256":"0xe4c645052e3223dc617ce4fdb8c44eee6047f50187b38d2b19e8f88575a6362d","urls":["bzz-raw://25f657768c1c652e7e68ba8ba3c4e667ff22872a7476c902ea7966092923f4aa","dweb:/ipfs/QmRke55xXKGsKMoNFUtm17t2nqmgfSHfEgx4vrib8c3i7D"],"license":"GPL-3.0"},"contracts/prebuilts/account/utils/Helpers.sol":{"keccak256":"0x362ebd624a0a4893c8d80f2dc86b27198a6f22d3bca6d4ad648cd4f12b8b2e5d","urls":["bzz-raw://bb43f98886861a0d1a6a80aaf8bfda8a2e8dace798e559dcba9fe5ebd2738817","dweb:/ipfs/QmUfAk7cbLqfhJdGgZeCqdzHFxrtjQgcbGtcQEbioLUDuS"],"license":"GPL-3.0"},"contracts/prebuilts/account/utils/UserOperation.sol":{"keccak256":"0x3f3aa133687f459f9fb538835a54aa769418dd6303a02c9fa691690fcc397964","urls":["bzz-raw://993f8daa2320ca301167767fff33a6989697394fe6dc65905edc4b32368850b5","dweb:/ipfs/Qmaymg8dsE6mrfAWJPs4DXbHR1wxESJnxyFhNkm7AmKBCK"],"license":"GPL-3.0"}},"version":1},"ast":{"absolutePath":"contracts/prebuilts/account/utils/BaseAccount.sol","id":69400,"exportedSymbols":{"BaseAccount":[69399],"IAccount":[66117],"IAggregator":[66257],"IEntryPoint":[66463],"INonceManager":[66482],"IStakeManager":[66623],"UserOperation":[73115],"UserOperationLib":[73285],"ValidationData":[72164],"_intersectTimeRange":[72308],"_packValidationData":[72345,72383],"_parseValidationData":[72223],"calldataKeccak":[72393]},"nodeType":"SourceUnit","src":"36:4658:321","nodes":[{"id":69259,"nodeType":"PragmaDirective","src":"36:24:321","nodes":[],"literals":["solidity","^","0.8",".12"]},{"id":69260,"nodeType":"ImportDirective","src":"145:35:321","nodes":[],"absolutePath":"contracts/prebuilts/account/interface/IAccount.sol","file":"../interface/IAccount.sol","nameLocation":"-1:-1:-1","scope":69400,"sourceUnit":66118,"symbolAliases":[],"unitAlias":""},{"id":69261,"nodeType":"ImportDirective","src":"181:38:321","nodes":[],"absolutePath":"contracts/prebuilts/account/interface/IEntrypoint.sol","file":"../interface/IEntrypoint.sol","nameLocation":"-1:-1:-1","scope":69400,"sourceUnit":66464,"symbolAliases":[],"unitAlias":""},{"id":69262,"nodeType":"ImportDirective","src":"220:23:321","nodes":[],"absolutePath":"contracts/prebuilts/account/utils/Helpers.sol","file":"./Helpers.sol","nameLocation":"-1:-1:-1","scope":69400,"sourceUnit":72394,"symbolAliases":[],"unitAlias":""},{"id":69399,"nodeType":"ContractDefinition","src":"478:4215:321","nodes":[{"id":69269,"nodeType":"UsingForDirective","src":"526:41:321","nodes":[],"global":false,"libraryName":{"id":69266,"name":"UserOperationLib","nameLocations":["532:16:321"],"nodeType":"IdentifierPath","referencedDeclaration":73285,"src":"532:16:321"},"typeName":{"id":69268,"nodeType":"UserDefinedTypeName","pathNode":{"id":69267,"name":"UserOperation","nameLocations":["553:13:321"],"nodeType":"IdentifierPath","referencedDeclaration":73115,"src":"553:13:321"},"referencedDeclaration":73115,"src":"553:13:321","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$73115_storage_ptr","typeString":"struct UserOperation"}}},{"id":69272,"nodeType":"VariableDeclaration","src":"694:51:321","nodes":[],"constant":true,"mutability":"constant","name":"SIG_VALIDATION_FAILED","nameLocation":"720:21:321","scope":69399,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":69270,"name":"uint256","nodeType":"ElementaryTypeName","src":"694:7:321","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"31","id":69271,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"744:1:321","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"visibility":"internal"},{"id":69289,"nodeType":"FunctionDefinition","src":"933:121:321","nodes":[],"body":{"id":69288,"nodeType":"Block","src":"991:63:321","nodes":[],"statements":[{"expression":{"arguments":[{"arguments":[{"id":69283,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1038:4:321","typeDescriptions":{"typeIdentifier":"t_contract$_BaseAccount_$69399","typeString":"contract BaseAccount"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_BaseAccount_$69399","typeString":"contract BaseAccount"}],"id":69282,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1030:7:321","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":69281,"name":"address","nodeType":"ElementaryTypeName","src":"1030:7:321","typeDescriptions":{}}},"id":69284,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1030:13:321","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"30","id":69285,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1045:1:321","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":69278,"name":"entryPoint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":69296,"src":"1008:10:321","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_contract$_IEntryPoint_$66463_$","typeString":"function () view returns (contract IEntryPoint)"}},"id":69279,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1008:12:321","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IEntryPoint_$66463","typeString":"contract IEntryPoint"}},"id":69280,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1021:8:321","memberName":"getNonce","nodeType":"MemberAccess","referencedDeclaration":66475,"src":"1008:21:321","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_uint192_$returns$_t_uint256_$","typeString":"function (address,uint192) view external returns (uint256)"}},"id":69286,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1008:39:321","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":69277,"id":69287,"nodeType":"Return","src":"1001:46:321"}]},"documentation":{"id":69273,"nodeType":"StructuredDocumentation","src":"752:176:321","text":" Return the account nonce.\n This method returns the next sequential nonce.\n For a nonce of a specific key, use `entrypoint.getNonce(account, key)`"},"functionSelector":"d087d288","implemented":true,"kind":"function","modifiers":[],"name":"getNonce","nameLocation":"942:8:321","parameters":{"id":69274,"nodeType":"ParameterList","parameters":[],"src":"950:2:321"},"returnParameters":{"id":69277,"nodeType":"ParameterList","parameters":[{"constant":false,"id":69276,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":69289,"src":"982:7:321","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":69275,"name":"uint256","nodeType":"ElementaryTypeName","src":"982:7:321","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"981:9:321"},"scope":69399,"stateMutability":"view","virtual":true,"visibility":"public"},{"id":69296,"nodeType":"FunctionDefinition","src":"1202:64:321","nodes":[],"documentation":{"id":69290,"nodeType":"StructuredDocumentation","src":"1060:137:321","text":" return the entryPoint used by this account.\n subclass should return the current entryPoint used by this account."},"functionSelector":"b0d691fe","implemented":false,"kind":"function","modifiers":[],"name":"entryPoint","nameLocation":"1211:10:321","parameters":{"id":69291,"nodeType":"ParameterList","parameters":[],"src":"1221:2:321"},"returnParameters":{"id":69295,"nodeType":"ParameterList","parameters":[{"constant":false,"id":69294,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":69296,"src":"1253:11:321","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IEntryPoint_$66463","typeString":"contract IEntryPoint"},"typeName":{"id":69293,"nodeType":"UserDefinedTypeName","pathNode":{"id":69292,"name":"IEntryPoint","nameLocations":["1253:11:321"],"nodeType":"IdentifierPath","referencedDeclaration":66463,"src":"1253:11:321"},"referencedDeclaration":66463,"src":"1253:11:321","typeDescriptions":{"typeIdentifier":"t_contract$_IEntryPoint_$66463","typeString":"contract IEntryPoint"}},"visibility":"internal"}],"src":"1252:13:321"},"scope":69399,"stateMutability":"view","virtual":true,"visibility":"public"},{"id":69330,"nodeType":"FunctionDefinition","src":"1456:379:321","nodes":[],"body":{"id":69329,"nodeType":"Block","src":"1649:186:321","nodes":[],"statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":69310,"name":"_requireFromEntryPoint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":69347,"src":"1659:22:321","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":69311,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1659:24:321","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":69312,"nodeType":"ExpressionStatement","src":"1659:24:321"},{"expression":{"id":69318,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":69313,"name":"validationData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":69308,"src":"1693:14:321","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":69315,"name":"userOp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":69300,"src":"1729:6:321","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$73115_calldata_ptr","typeString":"struct UserOperation calldata"}},{"id":69316,"name":"userOpHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":69302,"src":"1737:10:321","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_UserOperation_$73115_calldata_ptr","typeString":"struct UserOperation calldata"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":69314,"name":"_validateSignature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":69358,"src":"1710:18:321","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_UserOperation_$73115_calldata_ptr_$_t_bytes32_$returns$_t_uint256_$","typeString":"function (struct UserOperation calldata,bytes32) returns (uint256)"}},"id":69317,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1710:38:321","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1693:55:321","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":69319,"nodeType":"ExpressionStatement","src":"1693:55:321"},{"expression":{"arguments":[{"expression":{"id":69321,"name":"userOp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":69300,"src":"1773:6:321","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$73115_calldata_ptr","typeString":"struct UserOperation calldata"}},"id":69322,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1780:5:321","memberName":"nonce","nodeType":"MemberAccess","referencedDeclaration":73096,"src":"1773:12:321","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":69320,"name":"_validateNonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":69365,"src":"1758:14:321","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$__$","typeString":"function (uint256) view"}},"id":69323,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1758:28:321","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":69324,"nodeType":"ExpressionStatement","src":"1758:28:321"},{"expression":{"arguments":[{"id":69326,"name":"missingAccountFunds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":69304,"src":"1808:19:321","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":69325,"name":"_payPrefund","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":69398,"src":"1796:11:321","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":69327,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1796:32:321","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":69328,"nodeType":"ExpressionStatement","src":"1796:32:321"}]},"baseFunctions":[66116],"documentation":{"id":69297,"nodeType":"StructuredDocumentation","src":"1272:179:321","text":" Validate user's signature and nonce.\n subclass doesn't need to override this method. Instead, it should override the specific internal validation methods."},"functionSelector":"3a871cdd","implemented":true,"kind":"function","modifiers":[],"name":"validateUserOp","nameLocation":"1465:14:321","overrides":{"id":69306,"nodeType":"OverrideSpecifier","overrides":[],"src":"1607:8:321"},"parameters":{"id":69305,"nodeType":"ParameterList","parameters":[{"constant":false,"id":69300,"mutability":"mutable","name":"userOp","nameLocation":"1512:6:321","nodeType":"VariableDeclaration","scope":69330,"src":"1489:29:321","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$73115_calldata_ptr","typeString":"struct UserOperation"},"typeName":{"id":69299,"nodeType":"UserDefinedTypeName","pathNode":{"id":69298,"name":"UserOperation","nameLocations":["1489:13:321"],"nodeType":"IdentifierPath","referencedDeclaration":73115,"src":"1489:13:321"},"referencedDeclaration":73115,"src":"1489:13:321","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$73115_storage_ptr","typeString":"struct UserOperation"}},"visibility":"internal"},{"constant":false,"id":69302,"mutability":"mutable","name":"userOpHash","nameLocation":"1536:10:321","nodeType":"VariableDeclaration","scope":69330,"src":"1528:18:321","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":69301,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1528:7:321","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":69304,"mutability":"mutable","name":"missingAccountFunds","nameLocation":"1564:19:321","nodeType":"VariableDeclaration","scope":69330,"src":"1556:27:321","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":69303,"name":"uint256","nodeType":"ElementaryTypeName","src":"1556:7:321","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1479:110:321"},"returnParameters":{"id":69309,"nodeType":"ParameterList","parameters":[{"constant":false,"id":69308,"mutability":"mutable","name":"validationData","nameLocation":"1633:14:321","nodeType":"VariableDeclaration","scope":69330,"src":"1625:22:321","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":69307,"name":"uint256","nodeType":"ElementaryTypeName","src":"1625:7:321","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1624:24:321"},"scope":69399,"stateMutability":"nonpayable","virtual":true,"visibility":"external"},{"id":69347,"nodeType":"FunctionDefinition","src":"1916:149:321","nodes":[],"body":{"id":69346,"nodeType":"Block","src":"1972:93:321","nodes":[],"statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":69342,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":69335,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1990:3:321","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":69336,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1994:6:321","memberName":"sender","nodeType":"MemberAccess","src":"1990:10:321","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":69339,"name":"entryPoint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":69296,"src":"2012:10:321","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_contract$_IEntryPoint_$66463_$","typeString":"function () view returns (contract IEntryPoint)"}},"id":69340,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2012:12:321","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IEntryPoint_$66463","typeString":"contract IEntryPoint"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IEntryPoint_$66463","typeString":"contract IEntryPoint"}],"id":69338,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2004:7:321","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":69337,"name":"address","nodeType":"ElementaryTypeName","src":"2004:7:321","typeDescriptions":{}}},"id":69341,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2004:21:321","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1990:35:321","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"6163636f756e743a206e6f742066726f6d20456e747279506f696e74","id":69343,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2027:30:321","typeDescriptions":{"typeIdentifier":"t_stringliteral_f684c2c0c9ec797849b62669189fe025e9077c00ba7812987ce38c0071ad7a50","typeString":"literal_string \"account: not from EntryPoint\""},"value":"account: not from EntryPoint"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_f684c2c0c9ec797849b62669189fe025e9077c00ba7812987ce38c0071ad7a50","typeString":"literal_string \"account: not from EntryPoint\""}],"id":69334,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1982:7:321","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":69344,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1982:76:321","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":69345,"nodeType":"ExpressionStatement","src":"1982:76:321"}]},"documentation":{"id":69331,"nodeType":"StructuredDocumentation","src":"1841:70:321","text":" ensure the request comes from the known entrypoint."},"implemented":true,"kind":"function","modifiers":[],"name":"_requireFromEntryPoint","nameLocation":"1925:22:321","parameters":{"id":69332,"nodeType":"ParameterList","parameters":[],"src":"1947:2:321"},"returnParameters":{"id":69333,"nodeType":"ParameterList","parameters":[],"src":"1972:0:321"},"scope":69399,"stateMutability":"view","virtual":true,"visibility":"internal"},{"id":69358,"nodeType":"FunctionDefinition","src":"2980:151:321","nodes":[],"documentation":{"id":69348,"nodeType":"StructuredDocumentation","src":"2071:904:321","text":" validate the signature is valid for this message.\n @param userOp validate the userOp.signature field\n @param userOpHash convenient field: the hash of the request, to check the signature against\n          (also hashes the entrypoint and chain id)\n @return validationData signature and time-range of this operation\n      <20-byte> sigAuthorizer - 0 for valid signature, 1 to mark signature failure,\n         otherwise, an address of an \"authorizer\" contract.\n      <6-byte> validUntil - last timestamp this operation is valid. 0 for \"indefinite\"\n      <6-byte> validAfter - first timestamp this operation is valid\n      If the account doesn't use time-range, it is enough to return SIG_VALIDATION_FAILED value (1) for signature failure.\n      Note that the validation code cannot use block.timestamp (or block.number) directly."},"implemented":false,"kind":"function","modifiers":[],"name":"_validateSignature","nameLocation":"2989:18:321","parameters":{"id":69354,"nodeType":"ParameterList","parameters":[{"constant":false,"id":69351,"mutability":"mutable","name":"userOp","nameLocation":"3040:6:321","nodeType":"VariableDeclaration","scope":69358,"src":"3017:29:321","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$73115_calldata_ptr","typeString":"struct UserOperation"},"typeName":{"id":69350,"nodeType":"UserDefinedTypeName","pathNode":{"id":69349,"name":"UserOperation","nameLocations":["3017:13:321"],"nodeType":"IdentifierPath","referencedDeclaration":73115,"src":"3017:13:321"},"referencedDeclaration":73115,"src":"3017:13:321","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$73115_storage_ptr","typeString":"struct UserOperation"}},"visibility":"internal"},{"constant":false,"id":69353,"mutability":"mutable","name":"userOpHash","nameLocation":"3064:10:321","nodeType":"VariableDeclaration","scope":69358,"src":"3056:18:321","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":69352,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3056:7:321","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3007:73:321"},"returnParameters":{"id":69357,"nodeType":"ParameterList","parameters":[{"constant":false,"id":69356,"mutability":"mutable","name":"validationData","nameLocation":"3115:14:321","nodeType":"VariableDeclaration","scope":69358,"src":"3107:22:321","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":69355,"name":"uint256","nodeType":"ElementaryTypeName","src":"3107:7:321","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3106:24:321"},"scope":69399,"stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"id":69365,"nodeType":"FunctionDefinition","src":"3782:63:321","nodes":[],"body":{"id":69364,"nodeType":"Block","src":"3843:2:321","nodes":[],"statements":[]},"documentation":{"id":69359,"nodeType":"StructuredDocumentation","src":"3137:640:321","text":" Validate the nonce of the UserOperation.\n This method may validate the nonce requirement of this account.\n e.g.\n To limit the nonce to use sequenced UserOps only (no \"out of order\" UserOps):\n      `require(nonce < type(uint64).max)`\n For a hypothetical account that *requires* the nonce to be out-of-order:\n      `require(nonce & type(uint64).max == 0)`\n The actual nonce uniqueness is managed by the EntryPoint, and thus no other\n action is needed by the account itself.\n @param nonce to validate\n solhint-disable-next-line no-empty-blocks"},"implemented":true,"kind":"function","modifiers":[],"name":"_validateNonce","nameLocation":"3791:14:321","parameters":{"id":69362,"nodeType":"ParameterList","parameters":[{"constant":false,"id":69361,"mutability":"mutable","name":"nonce","nameLocation":"3814:5:321","nodeType":"VariableDeclaration","scope":69365,"src":"3806:13:321","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":69360,"name":"uint256","nodeType":"ElementaryTypeName","src":"3806:7:321","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3805:15:321"},"returnParameters":{"id":69363,"nodeType":"ParameterList","parameters":[],"src":"3843:0:321"},"scope":69399,"stateMutability":"view","virtual":true,"visibility":"internal"},{"id":69398,"nodeType":"FunctionDefinition","src":"4353:338:321","nodes":[],"body":{"id":69397,"nodeType":"Block","src":"4420:271:321","nodes":[],"statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":69373,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":69371,"name":"missingAccountFunds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":69368,"src":"4434:19:321","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":69372,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4457:1:321","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4434:24:321","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":69396,"nodeType":"IfStatement","src":"4430:255:321","trueBody":{"id":69395,"nodeType":"Block","src":"4460:225:321","statements":[{"assignments":[69375,null],"declarations":[{"constant":false,"id":69375,"mutability":"mutable","name":"success","nameLocation":"4480:7:321","nodeType":"VariableDeclaration","scope":69395,"src":"4475:12:321","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":69374,"name":"bool","nodeType":"ElementaryTypeName","src":"4475:4:321","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":69391,"initialValue":{"arguments":[{"hexValue":"","id":69389,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4572:2:321","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"arguments":[{"expression":{"id":69378,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"4501:3:321","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":69379,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4505:6:321","memberName":"sender","nodeType":"MemberAccess","src":"4501:10:321","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":69377,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4493:8:321","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":69376,"name":"address","nodeType":"ElementaryTypeName","src":"4493:8:321","stateMutability":"payable","typeDescriptions":{}}},"id":69380,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4493:19:321","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":69381,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4513:4:321","memberName":"call","nodeType":"MemberAccess","src":"4493:24:321","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":69388,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value","gas"],"nodeType":"FunctionCallOptions","options":[{"id":69382,"name":"missingAccountFunds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":69368,"src":"4526:19:321","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"arguments":[{"id":69385,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4557:7:321","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":69384,"name":"uint256","nodeType":"ElementaryTypeName","src":"4557:7:321","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"}],"id":69383,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"4552:4:321","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":69386,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4552:13:321","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint256","typeString":"type(uint256)"}},"id":69387,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4566:3:321","memberName":"max","nodeType":"MemberAccess","src":"4552:17:321","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"4493:78:321","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$gasvalue","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":69390,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4493:82:321","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"4474:101:321"},{"expression":{"components":[{"id":69392,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":69375,"src":"4590:7:321","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":69393,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4589:9:321","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":69394,"nodeType":"ExpressionStatement","src":"4589:9:321"}]}}]},"documentation":{"id":69366,"nodeType":"StructuredDocumentation","src":"3851:497:321","text":" sends to the entrypoint (msg.sender) the missing funds for this transaction.\n subclass MAY override this method for better funds management\n (e.g. send to the entryPoint more than the minimum required, so that in future transactions\n it will not be required to send again)\n @param missingAccountFunds the minimum value this method should send the entrypoint.\n  this value MAY be zero, in case there is enough deposit, or the userOp has a paymaster."},"implemented":true,"kind":"function","modifiers":[],"name":"_payPrefund","nameLocation":"4362:11:321","parameters":{"id":69369,"nodeType":"ParameterList","parameters":[{"constant":false,"id":69368,"mutability":"mutable","name":"missingAccountFunds","nameLocation":"4382:19:321","nodeType":"VariableDeclaration","scope":69398,"src":"4374:27:321","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":69367,"name":"uint256","nodeType":"ElementaryTypeName","src":"4374:7:321","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4373:29:321"},"returnParameters":{"id":69370,"nodeType":"ParameterList","parameters":[],"src":"4420:0:321"},"scope":69399,"stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"abstract":true,"baseContracts":[{"baseName":{"id":69264,"name":"IAccount","nameLocations":["511:8:321"],"nodeType":"IdentifierPath","referencedDeclaration":66117,"src":"511:8:321"},"id":69265,"nodeType":"InheritanceSpecifier","src":"511:8:321"}],"canonicalName":"BaseAccount","contractDependencies":[],"contractKind":"contract","documentation":{"id":69263,"nodeType":"StructuredDocumentation","src":"245:232:321","text":" Basic account implementation.\n this contract provides the basic logic for implementing the IAccount interface  - validateUserOp\n specific account implementation should inherit it and provide the account-specific logic"},"fullyImplemented":false,"linearizedBaseContracts":[69399,66117],"name":"BaseAccount","nameLocation":"496:11:321","scope":69400,"usedErrors":[],"usedEvents":[]}],"license":"GPL-3.0"},"id":321}